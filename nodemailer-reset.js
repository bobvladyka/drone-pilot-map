
// üìß Konfigurace e-mailov√©ho odes√≠laƒçe pomoc√≠ Nodemailer
const nodemailer = require('nodemailer');

// ‚ö†Ô∏è Nahraƒè sv√Ωmi skuteƒçn√Ωmi √∫daji (pou≈æij heslo aplikace z Gmailu)
const transporter = nodemailer.createTransport({
  host: 'smtp.seznam.cz',
  port: 465,
  secure: true, // true = SSL
  auth: {
    user: 'dronadmin@seznam.cz',
    pass: 'letamsdrony12'
  }
});

// Reset hesla s odesl√°n√≠m e-mailem
app.post('/reset-password', async (req, res) => {
  const { email } = req.body;
  if (!email) return res.status(400).send("E-mail je povinn√Ω.");

  db.get(`SELECT * FROM pilots WHERE email = ?`, [email], async (err, user) => {
    if (err || !user) {
      return res.status(404).send("U≈æivatel s t√≠mto e-mailem nebyl nalezen.");
    }

    const newPassword = Math.random().toString(36).slice(-8);
    const hash = await bcrypt.hash(newPassword, 10);

    db.run(`UPDATE pilots SET password_hash = ? WHERE email = ?`, [hash, email], async (err) => {
      if (err) {
        console.error("Chyba p≈ôi ukl√°d√°n√≠ nov√©ho hesla:", err);
        return res.status(500).send("Chyba p≈ôi ukl√°d√°n√≠ nov√©ho hesla.");
      }

      // Odesl√°n√≠ e-mailu s nov√Ωm heslem
      try {
        await transporter.sendMail({
          from: '"Dronov√° mapa" <TV≈ÆJ_EMAIL@gmail.com>',
          to: email,
          subject: "Nov√© heslo k √∫ƒçtu",
          text: `Va≈°e nov√© heslo: ${newPassword}

Doporuƒçujeme jej po p≈ôihl√°≈°en√≠ ihned zmƒõnit.`
        });
        res.send("Nov√© heslo bylo zasl√°no na v√°≈° e-mail.");
      } catch (mailErr) {
        console.error("Chyba p≈ôi odes√≠l√°n√≠ e-mailu:", mailErr);
        res.status(500).send("Heslo bylo vytvo≈ôeno, ale e-mail se nepoda≈ôilo odeslat.");
      }
    });
  });
});
