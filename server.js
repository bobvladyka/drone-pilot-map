require('dotenv').config();
const express = require('express');
const bcrypt = require('bcrypt');
const nodemailer = require('nodemailer');
const fetch = require('node-fetch');
const { Pool } = require('pg');
const path = require('path');
const prerender = require('prerender-node');
const session = require('express-session');
const cors = require('cors'); // P≈ôidejte tento require
const rateLimit = require('express-rate-limit');
const iconv = require('iconv-lite');

const cron = require('node-cron');

const app = express();

// --- Referral code utils ---
const crypto = require('crypto');
const REF_SECRET = process.env.REF_SECRET || 'super-secret-change-me';

function makeRefCode(userId) {
  const idBase = parseInt(userId, 10).toString(36);        // base36
  const hmac = crypto.createHmac('sha256', REF_SECRET).update(String(userId)).digest('hex');
  const check = hmac.slice(0, 6);                           // 6 znak≈Ø staƒç√≠
  return `${idBase}-${check}`.toUpperCase();
}

function parseRefCode(code) {
  if (!code || !/^[A-Z0-9]+-[A-F0-9]{6}$/i.test(code)) return null;
  const [idBase, check] = code.split('-');
  const userId = parseInt(idBase, 36);
  if (!Number.isInteger(userId) || userId <= 0) return null;
  const hmac = crypto.createHmac('sha256', REF_SECRET).update(String(userId)).digest('hex');
  const ok = hmac.slice(0, 6).toUpperCase() === check.toUpperCase();
  return ok ? userId : null;
}

// Vr√°t√≠ k√≥d pro p≈ôihl√°≈°en√©ho pilota (dle e-mailu)
app.get('/ref-code', async (req, res) => {
  try {
    const email = req.query.email;
    if (!email) return res.status(400).json({ error: 'Missing email' });
    const r = await pool.query('SELECT id FROM pilots WHERE email = $1', [email]);
    if (!r.rowCount) return res.status(404).json({ error: 'Pilot not found' });
    const code = makeRefCode(r.rows[0].id);
    res.json({ code, url: `https://najdipilota.cz/register.html?ref=${code}` });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: 'Failed to make ref code' });
  }
});



app.set('trust proxy', true); // pokud bƒõ≈æ√≠ za proxy (Render/Heroku/Nginx), a≈• .ip funguje spr√°vnƒõ

const allowLocalhostOnly = (req, res, next) => {
  const xf = (req.headers['x-forwarded-for'] || '').split(',')[0].trim();
  const ip = xf || req.ip || req.connection?.remoteAddress || '';
  const allowed = new Set(['127.0.0.1', '::1', '::ffff:127.0.0.1']);
  if (allowed.has(ip)) return next();
  return res.status(403).send('Forbidden (admin only on localhost)');
};

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false,
    sslmode: 'require'
  }
});

// hned po vytvo≈ôen√≠ poolu
pool.on('connect', (client) => {
  client.query("SET CLIENT_ENCODING TO 'UTF8'");
  client.query("SET search_path TO public"); // ‚Üê D≈ÆLE≈ΩIT√â
});


app.use(express.urlencoded({ extended: true }));
app.use(express.json());

const changePassLimiter = rateLimit({
  windowMs: 10 * 60 * 1000, // 10 minut
  max: 20
});

const BAD_CHARS = /[√Ç√É √Ñ√Ö√Ü√á√à√â√ä√ã√å√ç√é√è√ê√ë√í√ì√î√ï√ñ√ò√ô√ö√õ√ú√ù√û√ü ]/g;
const GOOD_CZ   = /[ƒõ≈°ƒç≈ô≈æ√Ω√°√≠√©≈Ø√∫ƒè≈•≈à√≥ƒö≈†ƒå≈ò≈Ω√ù√Å√ç√â≈Æ√öƒé≈§≈á√ì]/g;

function scoreCZ(s) {
  return (s.match(GOOD_CZ) || []).length - 2 * (s.match(BAD_CHARS) || []).length;
}

function bestUtfVariant(name) {
  if (typeof name !== 'string') return name;
  const variants = [
    name,
    // simulace ‚Äûbylo to cestou p≈ôevedeno do cp1250 a zase mylnƒõ ƒçteno jako UTF-8‚Äú
    iconv.decode(iconv.encode(name, 'win1250'), 'utf8'),
    // tot√©≈æ pro latin2
    iconv.decode(iconv.encode(name, 'latin2'), 'utf8'),
  ];
  return variants.reduce((best, cur) => (scoreCZ(cur) > scoreCZ(best) ? cur : best), name);
}

// Session konfigurace
app.use(session({
    secret: process.env.SESSION_SECRET || 'super_tajne_heslo',
    resave: false,
    saveUninitialized: false,
    //cookie: { secure: process.env.NODE_ENV === 'production' } 
    //AKTIVOVAT POKUD ≈†OUPU NA SERVER
    cookie: { secure: false } 
   
}));

// P≈ôidejte toto na zaƒç√°tek server.js
app.use(express.json({ type: 'application/json; charset=utf-8' }));

app.use(cors({
  origin: 'https://www.najdipilota.cz', // Povolit pouze va≈°i dom√©nu
  methods: ['GET', 'POST', 'PUT', 'DELETE'], // Povolen√© HTTP metody
  credentials: true // Povolit cookies a autentizaƒçn√≠ hlaviƒçky
}));


// Admin route protection middleware
function requireAdminLogin(req, res, next) {
    console.log('isAdmin:', req.session.isAdmin);  // P≈ôidej logov√°n√≠ pro session
    if (req.session && req.session.isAdmin) {
        return next();
    }
    return res.redirect('/adminland.html');
}


// TESTOVAC√ç struktura MAILU //
app.get('/test-unified-email', async (req, res) => {
  try {
    const html = `
<div style="font-family:'Poppins','Segoe UI',sans-serif;background:#F8F9FA;padding:0;margin:0;">
  <!-- Header -->
  <div style="background:#0077B6;color:#fff;padding:16px 20px;text-align:center;">
    <h1 style="margin:0;font-size:20px;font-weight:600;">NajdiPilota.cz</h1>
  </div>

  <!-- Obsah -->
  <div style="background:#fff;padding:20px;color:#495057;font-size:15px;line-height:1.6;">
    <p>Dobr√Ω den, DrBoom,</p>
    <p>
      Lorem ipsum dolor sit amet, consectetur adipiscing elit.  
      Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
    </p>
    <p>
      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
    </p>

    <!-- Flat button -->
    <p style="margin:24px 0;">
      <a href="https://www.najdipilota.cz/"
         style="background:#0077B6;color:#fff;text-decoration:none;
                padding:10px 18px;border-radius:6px;font-size:14px;font-weight:500;">
        Otev≈ô√≠t web
      </a>
    </p>
  </div>

  <!-- Footer -->
  <div style="background:#F1F1F1;color:#6c757d;font-size:12px;padding:12px;text-align:center;">
    ¬© 2025 NajdiPilota.cz ‚Äì Automatick√° notifikace
  </div>
</div>
    `;

    await transporter.sendMail({
      from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
      to: 'drboom@seznam.cz',
      subject: 'TEST: Jednotn√Ω e-mailov√Ω vzhled',
      html
    });

    res.send("‚úÖ Testovac√≠ e-mail posl√°n na drboom@seznam.cz");
  } catch (err) {
    console.error("‚ùå Chyba v /test-unified-email:", err);
    res.status(500).send("Nepoda≈ôilo se odeslat testovac√≠ e-mail");
  }
});

function wrapEmailContent(innerHtml, title = "NajdiPilota.cz") {
  return `
<div style="font-family:'Poppins','Segoe UI',sans-serif;background:#F8F9FA;padding:0;margin:0;">
  <!-- Header -->
  <div style="background:#0077B6;color:#fff;padding:16px 20px;text-align:center;">
    <h1 style="margin:0;font-size:20px;font-weight:600;">${title}</h1>
  </div>

  <!-- Content -->
  <div style="background:#fff;padding:20px;color:#495057;font-size:15px;line-height:1.6;">
    ${innerHtml}
  </div>

  <!-- Footer -->
  <div style="background:#F1F1F1;color:#6c757d;font-size:12px;padding:12px;text-align:center;">
    ¬© 2025 NajdiPilota.cz ‚Äì Automatick√° notifikace
  </div>
</div>`;
}

// TESTOVAC√ç struktura MAILU + ≈†ablona //

/*
app.get("/", (req, res) => {
  res.send("V≈°e bƒõ≈æ√≠!");
});
*/



function buildUnreadDigestText(pilotName, items) {
  const lines = items.map(it => (
    `- ${it.advertiserName} <${it.advertiserEmail}> | nep≈ôeƒçten√©: ${it.unreadCount}\n  Posledn√≠: ${it.lastMessage}\n  Kdy: ${it.lastTime.toLocaleString('cs-CZ', { timeZone: 'Europe/Prague' })}`
  )).join('\n\n');

  const total = items.reduce((a,b)=>a+b.unreadCount,0);

  return `Dobr√Ω den, ${pilotName},

M√°te ${total} nep≈ôeƒçten√Ωch zpr√°v v ${items.length} konverzac√≠ch:

${lines}

P≈ôejdƒõte do sekce "Moje zpr√°vy" na https://www.najdipilota.cz/moje-zpravy.html

(Tento p≈ôehled chod√≠ jednou dennƒõ a nepos√≠l√° se, pokud nic nep≈ôeƒçten√©ho nem√°te.)
`;
}

// bezpeƒçn√° escapovac√≠ utilita pro HTML
function escapeHtml(s) {
  return String(s ?? '')
    .replace(/&/g,'&amp;')
    .replace(/</g,'&lt;')
    .replace(/>/g,'&gt;')
    .replace(/"/g,'&quot;');
}



function buildNewDemandsDigestText(pilotName, demands) {
  const lines = demands.map(d => (
    `‚Ä¢ ${d.title || 'Bez n√°zvu'} (${d.location || d.region || '‚Äî'})` +
    (d.budget != null ? ` ‚Äî ${d.budget} Kƒç` : '') +
    `\n  ${(d.description || '').slice(0,150)}${(d.description || '').length > 150 ? '‚Ä¶' : ''}` +
    `\n  Vytvo≈ôeno: ${new Date(d.created_at).toLocaleString('cs-CZ', { timeZone: 'Europe/Prague' })}`
  )).join('\n\n');

  return `Dobr√Ω den, ${pilotName || 'pilote'},\n\nNov√© popt√°vky:\n\n${lines}\n\nV√≠ce na: https://www.najdipilota.cz/poptavky.html`;
}





// Registrace
app.post('/register', async (req, res) => {
  const {
    name, email, password, phone,
    street, city, zip, region, ref
  } = req.body;
  console.log("üîç Request body:", req.body);

  let referrerId = null;
  if (ref) {
    const parsed = parseRefCode(String(ref).trim()); // vr√°t√≠ userId nebo null
    if (parsed) referrerId = parsed;
  }

  // Nejprve najdeme nejni≈æ≈°√≠ voln√© ID
  let nextFreeId;
  try {
    const idResult = await pool.query(`
      WITH sequence AS (
        SELECT generate_series(
          (SELECT MIN(id) FROM pilots),
          (SELECT MAX(id) FROM pilots) + 100  -- +100 jako buffer
        ) AS id
      )
      SELECT MIN(s.id)
      FROM sequence s
      LEFT JOIN pilots p ON s.id = p.id
      WHERE p.id IS NULL
    `);
    
    nextFreeId = idResult.rows[0].min || 1; // Pokud neexistuj√≠ ≈æ√°dn√° ID, zaƒçneme od 1
    console.log(`P≈ôi≈ôazeno ID: ${nextFreeId}`);
  } catch (err) {
    console.error("Chyba p≈ôi hled√°n√≠ voln√©ho ID:", err);
    return res.status(500).send("Chyba p≈ôi registraci - nelze p≈ôidƒõlit ID");
  }

  const password_hash = await bcrypt.hash(password, 10);
  const location = [street, city, zip, region].filter(Boolean).join(', ');
  let lat = null, lon = null;

  try {
    const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(location)}&limit=1`, {
      headers: { 'User-Agent': 'DronMapApp/1.0' }
    });
    const data = await response.json();
    if (data.length > 0) {
      lat = parseFloat(data[0].lat);
      lon = parseFloat(data[0].lon);
    } else {
      console.warn("‚ùóAdresu se nepoda≈ôilo geok√≥dovat:", location);
    }
  } catch (err) {
    console.error("Chyba p≈ôi geok√≥dov√°n√≠:", err);
  }

  try {
  let visible_valid = new Date();
console.log("P≈Øvodn√≠ datum: ", visible_valid);
visible_valid.setDate(visible_valid.getDate() + 30);
console.log("Datum po p≈ôid√°n√≠ 7 dn√≠: ", visible_valid);


  const insertPilot = await pool.query(
      `INSERT INTO pilots (
        id, name, email, password_hash, phone, street, city, zip, region,
        latitude, longitude, visible_valid, ref_by_email, type_account, available
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
      RETURNING id`,
      [
        nextFreeId, // Explicitnƒõ nastav√≠me ID
        name,
        email,
        password_hash,
        phone,
        street,
        city,
        zip,
        region,
        lat,
        lon,
        visible_valid,
        ref ? String(ref).trim() : null,
        "Basic",
        "ANO"
      ]
    );

  // Pokud referrer existuje, p≈ôid√°me bonus
// Pokud referrer existuje, p≈ôid√°me bonus podle ID (bez e-mailu)
if (referrerId) {
  try {
    const refResult = await pool.query(
      `WITH updated_account AS (
         UPDATE pilots
         SET
           type_account = CASE
             WHEN type_account IS NULL OR type_account = 'Free' THEN 'Basic'
             ELSE type_account
           END,
           visible_valid = CASE
             WHEN visible_valid IS NULL THEN (CURRENT_DATE + INTERVAL '7 days')::timestamp
             ELSE visible_valid + INTERVAL '7 days'
           END
         WHERE id = $1
         RETURNING id, email, type_account
       )
       SELECT * FROM updated_account`,
      [referrerId]
    );

    if (refResult.rowCount > 0) {
      const acc = refResult.rows[0].type_account;
      console.log(`üéâ P≈ôips√°no +7 dn√≠ na ${acc} refererovi id=${referrerId}`);
    }
  } catch (err) {
    console.warn("‚ö†Ô∏è Nepoda≈ôilo se p≈ôipsat bonus refererovi:", err);
  }
}


  const newPilotId = insertPilot.rows[0].id;

  // Hned vlo≈æ√≠me v√Ωchoz√≠ GDPR souhlas
  await pool.query(
    `INSERT INTO consents (
      user_id, consent_type, consent_text, ip_address, user_agent
    ) VALUES ($1, $2, $3, $4, $5)`,
    [
      newPilotId,
      'gdpr_registration',
      'Souhlas√≠m se zpracov√°n√≠m osobn√≠ch √∫daj≈Ø za √∫ƒçelem zobrazen√≠ na Platformƒõ NajdiPilota.cz a jejich p≈ôed√°n√≠ z√°jemc≈Øm o m√© slu≈æby dle Z√°sad zpracov√°n√≠ osobn√≠ch √∫daj≈Ø.',
      req.ip,
      req.headers['user-agent']
    ]
  );

if (req.body.public_contact === 'on') {
  await pool.query(
    `INSERT INTO consents (user_id, consent_type, consent_text, ip_address, user_agent, timestamp)
     VALUES ($1, 'public_contact', $2, $3, $4, NOW())
     ON CONFLICT (user_id, consent_type)
     DO UPDATE SET timestamp = EXCLUDED.timestamp,
                   consent_text = EXCLUDED.consent_text,
                   ip_address = EXCLUDED.ip_address,
                   user_agent = EXCLUDED.user_agent`,
    [
      newPilotId,
      'Souhlas√≠m se zve≈ôejnƒõn√≠m e-mailu a telefonu v m√©m profilu.',
      req.ip,
      req.headers['user-agent']
    ]
  );
}



  console.log(`‚úÖ Pilot ${name} zaregistrov√°n a GDPR souhlas ulo≈æen.`);
  
await transporter.sendMail({
   from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
   to: email,
   subject: "V√≠tejte na NajdiPilota.cz!",
   html: onboardingEmailContent()  // Odesl√°n√≠ onboardingov√©ho e-mailu
});

console.log(`‚úÖ Onboarding e-mail odesl√°n na: ${email}`);
res.redirect('/'); 

  } catch (err) {
    console.error("Chyba p≈ôi registraci:", err);
    res.status(500).send("Chyba p≈ôi registraci");
  }
});


// P≈ôihl√°≈°en√≠
app.post('/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const result = await pool.query(`SELECT * FROM pilots WHERE email = $1`, [email]);
    const user = result.rows[0];
    if (!user) return res.status(401).send("U≈æivatel nenalezen.");

    const isMatch = await bcrypt.compare(password, user.password_hash);
    if (!isMatch) return res.status(401).send("Nespr√°vn√© heslo.");

    // Pokud uplynul mƒõs√≠c, p≈ôepneme √∫ƒçet na Free
    let newAccountType = user.type_account;
    const currentDate = new Date();
    if (user.visible_valid && new Date(user.visible_valid) <= currentDate) {
      newAccountType = "Free";  // Po mƒõs√≠ci se p≈ôepne na Free
      await pool.query(
        `UPDATE pilots SET type_account = $1 WHERE email = $2`,
        ["Free", email]
      );
      console.log(`Pilot ${email} byl p≈ôepnut na typ √∫ƒçtu Free.`);
    }

    // Ulo≈æit do session
    req.session.userId = user.id;
    req.session.email = user.email;
    req.session.typeAccount = newAccountType;

    res.json({
      success: true,
      id: user.id,
      email: user.email,
      typeAccount: newAccountType
    });

  } catch (err) {
    console.error("Chyba p≈ôi p≈ôihl√°≈°en√≠:", err);
    res.status(500).send("Chyba na serveru");
  }
});



// Vr√°cen√≠ v≈°ech pilot≈Ø
app.get('/pilots', async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT 
        id, name, email, phone, 
        street, city, zip, region,
        latitude, longitude, website,
        note, licenses, drones,
        travel, specialization,
        volunteer, registrationnumber,
        available, visible, visible_payment, visible_valid, type_account
      FROM pilots
    `);

   const pilots = [];
   for (let row of result.rows) {
      // Ovƒõ≈ôen√≠, jestli m√° souhlas "public_contact"
      const consentRes = await pool.query(
        'SELECT 1 FROM consents WHERE user_id = $1 AND consent_type = $2 LIMIT 1',
        [row.id, 'public_contact']
      );
      row.hasPublicConsent = consentRes.rowCount > 0;

      // Pokud nen√≠ souhlas, sma≈æeme z v√Ωstupu email a telefon
      if (!row.hasPublicConsent) {
        row.email = null;
        row.phone = null;
      }

      pilots.push(row);
    }

    res.setHeader('Content-Type', 'application/json; charset=utf-8'); // Ensure UTF-8 encoding
    res.json(pilots);
  } catch (err) {
    console.error("Chyba p≈ôi naƒç√≠t√°n√≠ pilot≈Ø:", err);
    res.status(500).json([]);
  }
});

// Reset hesla
const transporter = nodemailer.createTransport({
  host: 'smtp.seznam.cz',
  port: 465,
  secure: true,
  auth: {
    user: 'dronadmin@seznam.cz',
    pass: 'letamsdrony12'
  }
});

app.post("/change-email", async (req, res) => {
  const { oldEmail, newEmail } = req.body;
  if (!oldEmail || !newEmail) {
    return res.status(400).send("Chyb√≠ e-mail.");
  }

  try {
    const result = await pool.query("SELECT id FROM pilots WHERE email = $1", [oldEmail]);
    if (!result.rowCount) {
      return res.status(404).send("U≈æivatel nenalezen.");
    }

    await pool.query("UPDATE pilots SET email = $1 WHERE email = $2", [newEmail, oldEmail]);

    // Odesl√°n√≠ potvrzovac√≠ho e-mailu na p≈Øvodn√≠ adresu
    await transporter.sendMail({
      from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
      to: oldEmail,
      subject: "Zmƒõna e-mailov√© adresy",
      html: buildChangeEmailEmail(oldEmail, newEmail)
    });

    res.send("‚úÖ E-mail byl √∫spƒõ≈°nƒõ zmƒõnƒõn.");
  } catch (err) {
    console.error("Chyba p≈ôi zmƒõnƒõ e-mailu:", err);
    res.status(500).send("Chyba p≈ôi zmƒõnƒõ e-mailu.");
  }
});


app.post('/reset-password', async (req, res) => {
  const { email } = req.body;
  if (!email) return res.status(400).send("E-mail je povinn√Ω.");

  try {
    const result = await pool.query(`SELECT * FROM pilots WHERE email = $1`, [email]);
    const user = result.rows[0];
    if (!user) return res.status(404).send("U≈æivatel s t√≠mto e-mailem nebyl nalezen.");

    const newPassword = Math.random().toString(36).slice(-8);
    const hash = await bcrypt.hash(newPassword, 10);

    await pool.query(`UPDATE pilots SET password_hash = $1 WHERE email = $2`, [hash, email]);

    await transporter.sendMail({
      from: '"Dronov√° mapa" <dronadmin@seznam.cz>',
      to: email,
      subject: "Nov√© heslo k √∫ƒçtu",
      text: `Va≈°e nov√© heslo je: ${newPassword}\n\nDoporuƒçujeme jej po p≈ôihl√°≈°en√≠ ihned zmƒõnit.`
    });

    res.send("Nov√© heslo bylo odesl√°no na v√°≈° e-mail.");
  } catch (err) {
    console.error("Chyba p≈ôi resetov√°n√≠ hesla:", err);
    res.status(500).send("Chyba na serveru p≈ôi zmƒõnƒõ hesla");
  }
});

async function geocodeLocation({ street, city, zip, region }) {
  const queries = [];

  if (street && city && zip && region) queries.push([street, city, zip, region].join(", "));
  if (street && city && zip) queries.push([street, city, zip].join(", "));
  if (street && city) queries.push([street, city].join(", "));
  if (city && zip) queries.push([city, zip].join(", "));
  if (city) queries.push(city);
  if (zip) queries.push(zip);

  for (const q of queries) {
    try {
      const res = await fetch(
        `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(q)}&limit=1`,
        { headers: { "User-Agent": "DronMapApp/1.0" } }
      );
      const data = await res.json();
      if (Array.isArray(data) && data.length > 0) {
        return {
          lat: parseFloat(data[0].lat),
          lon: parseFloat(data[0].lon),
          usedQuery: q
        };
      }
    } catch (err) {
      console.error("‚ùå Chyba p≈ôi geok√≥dov√°n√≠ dotazu:", q, err);
    }
  }

  return { lat: null, lon: null, usedQuery: null };
}

app.post("/update", async (req, res) => {
  console.log("P≈ôijat√° data:", req.body);

  let {
    email,
    name,
    phone,
    website,
    street,
    city,
    zip,
    region,
    drones,
    note,
    travel,
    licenses,
    specialization_ids,   // << sem jde pole ID (Array) nebo comma-string
    volunteer,
    registrationnumber,
    available,
    visible,
    visible_payment,
    visible_valid
  } = req.body;

  // nat√°hni star√° data (kv≈Øli omezen√≠m a default≈Øm)
  const oldDataResult = await pool.query(
    "SELECT visible, visible_valid, visible_payment, type_account, available AS old_available FROM pilots WHERE email = $1",
    [email]
  );
  const oldPilotData = oldDataResult.rows[0];
  if (!oldPilotData) {
    return res.status(404).send("Pilot nenalezen.");
  }

  // P≈ôevod specialization_ids -> ƒçist√© pole ƒç√≠sel
  let specIds = [];
  if (Array.isArray(specialization_ids)) {
    specIds = specialization_ids
      .map(x => Number(x))
      .filter(x => Number.isInteger(x) && x > 0);
  } else if (typeof specialization_ids === "string" && specialization_ids.trim() !== "") {
    specIds = specialization_ids
      .split(",")
      .map(s => Number(s.trim()))
      .filter(x => Number.isInteger(x) && x > 0);
  }

  // üîí Restrikce podle typu √∫ƒçtu
  if (oldPilotData.type_account === "Free") {
    available = "ANO";         // v≈ædy ANO
    website = null;            // zak√°zat
    note = null;               // zak√°zat
    registrationnumber = null; // zak√°zat
    visible = "ANO";

    // Free: max 1 specializace
    if (specIds.length > 1) specIds = specIds.slice(0, 1);

    // Free: jen prvn√≠ dron
    if (drones) {
      drones = drones.split(",")[0]?.trim() || null;
    }
  }

  if (oldPilotData.type_account === "Basic") {
    if (!available) available = oldPilotData.old_available;
    // Basic: max 2 specializace (dr≈æ√≠me se FE, kde hl√≠d√°≈° 2)
    if (specIds.length > 2) specIds = specIds.slice(0, 2);
    // Basic: max 2 drony
    if (drones) {
      drones = drones
        .split(",")
        .slice(0, 2)
        .map(s => s.trim())
        .filter(Boolean)
        .join(", ") || null;
    }
  }

  // üõ°Ô∏è available v≈ædy jen ANO/NE
  if (available !== "ANO" && available !== "NE") {
    available = "NE";
  }

  // visible -> ANO/NE
  if (visible === undefined || visible === null) {
    visible = oldPilotData.visible;
  } else {
    visible = visible ? "ANO" : "NE";
  }
  if (!visible_valid)   visible_valid   = oldPilotData.visible_valid;
  if (!visible_payment) visible_payment = oldPilotData.visible_payment;

  // Geok√≥dov√°n√≠ s fallbackem
let { lat, lon, usedQuery } = await geocodeLocation({ street, city, zip, region });

// Pokud nic, nech star√© sou≈ôadnice
if (!lat || !lon) {
  console.warn("‚ùóNepoda≈ôilo se geok√≥dovat adresu, ponech√°v√°m star√© sou≈ôadnice.");
  lat = oldPilotData.latitude;
  lon = oldPilotData.longitude;
} else {
  console.log(`‚úÖ Geok√≥dov√°no na (${lat}, ${lon}) pomoc√≠ dotazu: ${usedQuery}`);
}


  // LOG pro kontrolu
  console.log("Hodnoty pro update:", {
    name, phone, website, street, city, zip, region,
    drones, note, travel, licenses,
    specialization_ids: specIds,
    volunteer, lat, lon, registrationnumber, available, visible
  });

  // Ulo≈æen√≠ v transakci
  const client = await pool.connect();
  try {
    await client.query("BEGIN");

    // 1) Update pilots (bez textov√©ho 'specialization' ‚Äì dopln√≠me hezk√© CSV a≈æ po vlo≈æen√≠ ID)
    const r = await client.query(
      `UPDATE pilots SET 
        name = $1, 
        phone = $2, 
        website = $3, 
        street = $4, 
        city = $5, 
        zip = $6, 
        region = $7,
        drones = $8, 
        note = $9, 
        travel = $10, 
        licenses = $11, 
        volunteer = $12, 
        latitude = $13, 
        longitude = $14,
        registrationnumber = $15,
        available = $16,
        visible = $17,
        visible_payment = $18,
        visible_valid = $19
      WHERE email = $20
      RETURNING id`,
      [
        name || null,
        phone || null,
        website || null,
        street || null,
        city || null,
        zip || null,
        region || null,
        drones || null,
        note || null,
        travel || null,
        licenses || null,
        volunteer === "ANO" ? "ANO" : "NE",
        lat,
        lon,
        registrationnumber || null,
        available,
        visible,
        visible_payment || null,
        visible_valid || null,
        email
      ]
    );

    if (r.rowCount === 0) {
      await client.query("ROLLBACK");
      return res.status(404).send("Pilot nenalezen.");
    }
    const pilotId = r.rows[0].id;

    // 2) P≈ôepi≈° specializace podle ID
    await client.query("DELETE FROM pilot_specializations WHERE pilot_id = $1", [pilotId]);

    if (specIds.length > 0) {
      const values = specIds.map((_, i) => `($1, $${i + 2})`).join(",");
      await client.query(
        `INSERT INTO pilot_specializations (pilot_id, category_id) VALUES ${values}
         ON CONFLICT DO NOTHING`,
        [pilotId, ...specIds]
      );

      // hezk√© CSV n√°zv≈Ø do pilots.specialization pro kompatibilitu
      const csvRes = await client.query(
        `SELECT string_agg(DISTINCT c.name, ', ' ORDER BY c.name) AS csv
         FROM categories c
         WHERE c.id = ANY($1::int[])`,
        [specIds]
      );
      const csv = csvRes.rows[0].csv || null;
      await client.query("UPDATE pilots SET specialization = $1 WHERE id = $2", [csv, pilotId]);
    } else {
      // bez specializac√≠ -> nuluj textovou verzi
      await client.query("UPDATE pilots SET specialization = NULL WHERE id = $1", [pilotId]);
    }

    await client.query("COMMIT");
    res.send("‚úÖ √ödaje byly √∫spƒõ≈°nƒõ aktualizov√°ny.");
  } catch (err) {
    await client.query("ROLLBACK");
    console.error("‚ùå √öPLN√Å CHYBOV√Å ZPR√ÅVA:", err);
    console.error("‚ùå STACK TRACE:", err.stack);
    res.status(500).json({
      error: "Chyba p≈ôi aktualizaci",
      details: err.message,
      stack: process.env.NODE_ENV === "development" ? err.stack : undefined
    });
  } finally {
    client.release();
  }
});



app.post('/delete-all', allowLocalhostOnly, requireAdminLogin, async (req, res) => {
  try {
    await pool.query('DELETE FROM pilots');
    res.send("‚úÖ V≈°echny z√°znamy byly smaz√°ny.");
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi maz√°n√≠:", err);
    res.status(500).send("Chyba p≈ôi maz√°n√≠.");
  }
});

app.post('/delete-selected', allowLocalhostOnly,  requireAdminLogin, async (req, res) => {
  const ids = req.body.ids;
  if (!Array.isArray(ids)) {
    return res.status(400).send('Neplatn√Ω vstup ‚Äì oƒçek√°v√° se pole ID.');
  }

  try {
    const placeholders = ids.map((_, i) => `$${i + 1}`).join(',');
    const query = `DELETE FROM pilots WHERE id IN (${placeholders})`;
    await pool.query(query, ids);
    res.send(`‚úÖ Smaz√°no ${ids.length} pilot≈Ø.`);
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi maz√°n√≠:", err);
    res.status(500).send("Chyba p≈ôi maz√°n√≠.");
  }
});


app.post("/inzerent-register", async (req, res) => {
  const { name, email, password, confirmPassword } = req.body;

  // Ovƒõ≈ôen√≠ shody hesel
  if (password !== confirmPassword) {
    return res.status(400).send("Hesla se neshoduj√≠.");
  }

  try {
    const existing = await pool.query("SELECT * FROM advertisers WHERE email = $1", [email]);
    if (existing.rows.length > 0) {
      return res.status(400).send("Tento e-mail u≈æ je registrov√°n.");
    }

    // Zahashuj heslo
    const hashedPassword = await bcrypt.hash(password, 10);
	console.log("Registrace prob√≠h√° s:", name, email, hashedPassword);
    // Ulo≈æ inzerenta do datab√°ze
   const result = await pool.query(
  "INSERT INTO advertisers (name, email, password) VALUES ($1, $2, $3) RETURNING *",
  [name, email, hashedPassword]
);
console.log("Vlo≈æeno do DB:", result.rows[0]);

console.log("Z√°znam ulo≈æen do datab√°ze.");


    res.status(201).send("Registrace √∫spƒõ≈°n√°!");
  } catch (err) {
    console.error("Chyba p≈ôi registraci:", err);
    res.status(500).send("Nastala chyba p≈ôi registraci.");
  }
});



app.post("/inzerent", async (req, res) => {
  const { email, password } = req.body;

  try {
    const result = await pool.query("SELECT * FROM advertisers WHERE email = $1", [email]);
    const advertiser = result.rows[0];

    if (!advertiser) {
      return res.status(401).json({ success: false, message: "Neplatn√Ω e-mail nebo heslo." });
    }

    const match = await bcrypt.compare(password, advertiser.password);
    if (!match) {
  return res.status(401).json({ success: false, message: "Neplatn√Ω e-mail nebo heslo." });
}

// >>> P≈òIDEJ TOTO:
req.session.userId = advertiser.id;     // voliteln√©, ale hod√≠ se
req.session.email  = advertiser.email;  // d≈Øle≈æit√© ‚Äì ƒçte se v /get-my-advertiser a /poptavky
req.session.role   = 'advertiser';

return res.json({             // ‚úÖ tady
      success: true,
      id: advertiser.id,
      email: advertiser.email
    });


    res.json({ success: true, message: "P≈ôihl√°≈°en√≠ probƒõhlo √∫spƒõ≈°nƒõ." });
  } catch (error) {
    console.error("Chyba p≈ôi p≈ôihla≈°ov√°n√≠ inzerenta:", error);
    res.status(500).json({ success: false, message: "Chyba serveru." });
  }
});

app.post('/inzerent-reset-password', async (req, res) => {
  const { email } = req.body;
  if (!email) return res.status(400).send("E-mail je povinn√Ω.");

  try {
    const result = await pool.query(`SELECT * FROM advertisers WHERE email = $1`, [email]);
    const user = result.rows[0];
    if (!user) return res.status(404).send("U≈æivatel s t√≠mto e-mailem nebyl nalezen.");

    const newPassword = Math.random().toString(36).slice(-8);
    const hash = await bcrypt.hash(newPassword, 10);

    await pool.query(`UPDATE advertisers SET password = $1 WHERE email = $2`, [hash, email]);

    await transporter.sendMail({
      from: '"Dronov√° mapa - Inzerent" <dronadmin@seznam.cz>',
      to: email,
      subject: "Nov√© heslo k √∫ƒçtu",
      text: `Va≈°e nov√© heslo je: ${newPassword}\n\nDoporuƒçujeme jej po p≈ôihl√°≈°en√≠ ihned zmƒõnit.`
    });

    res.send("Nov√© heslo bylo odesl√°no na v√°≈° e-mail.");
  } catch (err) {
    console.error("Chyba p≈ôi resetov√°n√≠ hesla:", err);
    res.status(500).send("Chyba na serveru p≈ôi zmƒõnƒõ hesla");
  }
});



app.get('/adminland.html', allowLocalhostOnly, (req, res) => {
  res.sendFile(path.join(__dirname, 'private', 'adminland.html'));
});

// ADMIN str√°nka
app.get('/admin.html', allowLocalhostOnly, requireAdminLogin, (req, res) => {
  res.sendFile(path.join(__dirname, 'private', 'admin.html'));
});

// Alternativn√≠ /admin -> stejn√° ochrana
app.get('/admin', allowLocalhostOnly, requireAdminLogin, (req, res) => {
  res.sendFile(path.join(__dirname, 'private', 'admin.html'));
});

// Admin login/logout akce pouze z localhostu
app.post('/admin-login', allowLocalhostOnly, (req, res) => { 

    const { username, password } = req.body;
    const ADMIN_USERNAME = process.env.ADMIN_USERNAME;
    const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD;

    if (username === ADMIN_USERNAME && password === ADMIN_PASSWORD) {
        req.session.isAdmin = true;
        return res.json({ success: true });
    }
    return res.status(401).json({ success: false, message: 'Neplatn√© p≈ôihla≈°ovac√≠ √∫daje' });

});
app.get('/admin-logout', allowLocalhostOnly, (req, res) => { 

    req.session.destroy(() => {
        res.redirect('/adminland.html');
    });
});

// Stav session pro p≈ôesmƒõrov√°n√≠ z admin.html
app.get('/check-admin-session', allowLocalhostOnly, (req, res) => {
  if (req.session.isAdmin) return res.status(200).send('OK');
  return res.status(403).send('Unauthorized');
});

app.post('/contact-pilot', async (req, res) => {
  const { to, message } = req.body;
  if (!to || !message) return res.status(400).send("Chyb√≠ e-mail nebo zpr√°va.");

  try {
    await transporter.sendMail({
      from: '"Dronov√° mapa" <dronadmin@seznam.cz>',
      to,
      cc: 'dronadmin@seznam.cz', // kopie pro admina
      subject: 'Zpr√°va od n√°v≈°tƒõvn√≠ka mapy',
      text: message
    });
    res.send("‚úÖ Zpr√°va byla √∫spƒõ≈°nƒõ odesl√°na.");
  } catch (err) {
    console.error("Chyba p≈ôi odes√≠l√°n√≠ zpr√°vy:", err);
    res.status(500).send("‚ùå Nepoda≈ôilo se odeslat zpr√°vu.");
  }
});

app.post("/update-membership", async (req, res) => {
  const { email, membership_type } = req.body;

  if (!email || !membership_type) {
    return res.status(400).json({ success: false, message: "Chyb√≠ e-mail nebo typ ƒçlenstv√≠." });
  }

  // Povolen√© hodnoty
  const allowedTypes = ["Free", "Basic", "Premium"];
  if (!allowedTypes.includes(membership_type)) {
    return res.status(400).json({ success: false, message: "Neplatn√Ω typ ƒçlenstv√≠." });
  }

  try {
    const result = await pool.query(
      `UPDATE pilots SET type_account = $1 WHERE email = $2 RETURNING type_account`,
      [membership_type, email]
    );

    if (result.rowCount === 0) {
      return res.status(404).json({ success: false, message: "Pilot nenalezen." });
    }

    res.json({ success: true, message: "ƒålenstv√≠ bylo aktualizov√°no.", type_account: result.rows[0].type_account });
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi aktualizaci ƒçlenstv√≠:", err);
    res.status(500).json({ success: false, message: "Chyba na serveru." });
  }
});


// --- Vr√°cen√≠ dat p≈ôihl√°≈°en√©ho pilota ---
app.get('/get-my-pilot', async (req, res) => {
  try {
    let email = req.session?.email || req.query.email || req.headers['x-user-email'];
    let userId = req.session?.userId;

    // Pokud nen√≠ userId v session, ale m√°me email, najdeme ho v DB
    if (!userId && email) {
      const userRes = await pool.query('SELECT id FROM pilots WHERE email = $1', [email]);
      if (userRes.rowCount > 0) {
        userId = userRes.rows[0].id;
      }
    }

    if (!userId) {
      return res.status(401).json({ error: 'Nep≈ôihl√°≈°en' });
    }

    const result = await pool.query('SELECT * FROM pilots WHERE id = $1', [userId]);
    if (result.rowCount === 0) {
      return res.status(404).json({ error: 'Pilot nenalezen' });
    }

    const user = result.rows[0];
    const currentDate = new Date();

    // Kontrola platnosti ƒçlenstv√≠ - pouze informativn√≠, bez p≈ôepisov√°n√≠ DB
    let accountStatus = user.type_account;
    let isExpired = false;
    
    if (user.visible_valid && new Date(user.visible_valid) <= currentDate) {
      isExpired = true;
      // Nastav√≠me status na "expired", ale NEP≈òEPISUJEME datab√°zi
      accountStatus = "Free";
    }

   // naƒçti specialization_ids
const specsRes = await pool.query(
  'SELECT category_id FROM pilot_specializations WHERE pilot_id = $1 ORDER BY category_id',
  [user.id]
);
const specialization_ids = specsRes.rows.map(r => r.category_id);

// vr√°cen√≠ dat vƒç. specialization_ids (ponech√°me p≈Øvodn√≠ pole specialization pro kompatibilitu)
res.json({
  ...user,
  specialization_ids,
  type_account: accountStatus,
  membership_expired: isExpired
});
    
  } catch (err) {
    console.error('Chyba p≈ôi naƒç√≠t√°n√≠ pilota:', err);
    res.status(500).json({ error: 'Chyba na serveru' });
  }
});

// --- Ulo≈æen√≠ / odvol√°n√≠ souhlasu ---
app.post('/save-consent', async (req, res) => {
  const { email, consent_type, consent_text, granted } = req.body;
  let userId = req.session?.userId;

  try {
    if (!userId && email) {
      const userRes = await pool.query('SELECT id FROM pilots WHERE email = $1', [email]);
      if (userRes.rowCount > 0) {
        userId = userRes.rows[0].id;
      }
    }

    if (!userId) {
      return res.status(401).json({ error: 'Nep≈ôihl√°≈°en' });
    }
    
     const timestamp = granted ? new Date() : null;

    if (granted) {
      // Ulo≈æ√≠me souhlas do datab√°ze
      await pool.query(
        `INSERT INTO consents (user_id, consent_type, consent_text, ip_address, user_agent, timestamp)
         VALUES ($1, $2, $3, $4, $5, $6)
         ON CONFLICT (user_id, consent_type) DO UPDATE SET timestamp = EXCLUDED.timestamp`,
        [userId, consent_type, consent_text, req.ip, req.headers['user-agent'], timestamp]
      );
    } else {
      // Pokud souhlas nen√≠ udƒõlen, odstran√≠me z√°znam
      await pool.query(
        'DELETE FROM consents WHERE user_id = $1 AND consent_type = $2',
        [userId, consent_type]
      );
    }

    res.status(200).json({ success: true, hasPublicConsent: granted, timestamp });
  } catch (err) {
    console.error('Chyba p≈ôi ukl√°d√°n√≠ souhlasu:', err);
    res.status(500).json({ error: 'Chyba p≈ôi ukl√°d√°n√≠ souhlasu', detail: err.message });
  }
});

app.get('/get-consent-timestamp', async (req, res) => {
  const { email } = req.query;
  let userId = req.session?.userId;

  try {
    if (!userId && email) {
      const userRes = await pool.query('SELECT id FROM pilots WHERE email = $1', [email]);
      if (userRes.rowCount > 0) {
        userId = userRes.rows[0].id;
      }
    }

    if (!userId) {
      return res.status(401).json({ error: 'Nep≈ôihl√°≈°en' });
    }

    // Naƒçteme timestamp souhlasu
    const result = await pool.query(
      `SELECT timestamp FROM consents WHERE user_id = $1 AND consent_type = $2`,
      [userId, 'public_contact'] // Nebo jin√Ω typ souhlasu podle pot≈ôeby
    );

    if (result.rowCount > 0) {
      const consentTimestamp = result.rows[0].timestamp;
      res.status(200).json({ timestamp: consentTimestamp });
    } else {
      res.status(404).json({ error: 'Souhlas nebyl nalezen.' });
    }
  } catch (err) {
    console.error('Chyba p≈ôi naƒç√≠t√°n√≠ souhlasu:', err);
    res.status(500).json({ error: 'Chyba p≈ôi naƒç√≠t√°n√≠ souhlasu' });
  }
});

app.post('/create-conversation', async (req, res) => {
  const { pilotEmail, advertiserEmail } = req.body;

  try {
    // Get pilot and advertiser details from the database
    const pilotResult = await pool.query('SELECT id FROM pilots WHERE email = $1', [pilotEmail]);
    const advertiserResult = await pool.query('SELECT id FROM advertisers WHERE email = $1', [advertiserEmail]);

    if (pilotResult.rowCount === 0 || advertiserResult.rowCount === 0) {
      return res.status(400).json({ success: false, message: 'Pilot nebo inzerent nenalezen' });
    }

    const pilotId = pilotResult.rows[0].id;
    const advertiserId = advertiserResult.rows[0].id;

    // Check if a conversation already exists between this pilot and advertiser
    const existingConversation = await pool.query(
      'SELECT id FROM conversations WHERE pilot_id = $1 AND advertiser_id = $2 LIMIT 1',
      [pilotId, advertiserId]
    );

    let conversationId;

    if (existingConversation.rowCount > 0) {
      // If the conversation exists, use the existing conversationId
      conversationId = existingConversation.rows[0].id;
    } else {
      // If no conversation exists, create a new one
      const conversationResult = await pool.query(
        `INSERT INTO conversations (pilot_id, advertiser_id) 
         VALUES ($1, $2) 
         RETURNING id`,
        [pilotId, advertiserId]
      );
      conversationId = conversationResult.rows[0].id;
    }

    res.json({ success: true, conversationId });

  } catch (err) {
    console.error("Chyba p≈ôi vytv√°≈ôen√≠ konverzace:", err);
    res.status(500).json({ success: false, message: 'Chyba serveru p≈ôi vytv√°≈ôen√≠ konverzace' });
  }
});


// GET /get-advertiser-conversations?advertiserEmail=...
app.get('/get-advertiser-conversations', async (req, res) => {
  const { advertiserEmail } = req.query;
  if (!advertiserEmail) return res.json({ success: false, message: 'Missing advertiserEmail' });

  try {
    // 1) Najdi advertiser_id podle e-mailu
    const advRes = await pool.query('SELECT id FROM advertisers WHERE email = $1', [advertiserEmail]);
    if (advRes.rowCount === 0) {
      return res.json({ success: true, conversations: [] });
    }
    const advertiserId = advRes.rows[0].id;

    // 2) Konverzace inzerenta + posledn√≠ zpr√°va + unread (poƒç√≠tan√© proti conversation_views.user_id = advertiserId)
    const convRes = await pool.query(`
  WITH last_msg AS (
    SELECT DISTINCT ON (m.conversation_id)
           m.conversation_id,
           m.id            AS msg_id,
           m.sender_id     AS last_sender_id,
           m.message       AS last_message,
           m.created_at    AS last_message_time
    FROM messages m
    ORDER BY m.conversation_id, m.created_at DESC
  )
  SELECT
    c.id,
    p.email AS pilot_email,
    p.name  AS pilot_name,
    lm.last_message,
    lm.last_message_time,
    -- unread = posledn√≠ zpr√°va je od druh√© strany A je novƒõj≈°√≠ ne≈æ last_seen (nebo last_seen neexistuje)
    CASE
      WHEN lm.msg_id IS NULL THEN FALSE
      WHEN lm.last_sender_id = c.advertiser_id THEN FALSE
      ELSE (lm.last_message_time > COALESCE(cv.last_seen, '1970-01-01'))
    END AS unread
  FROM conversations c
  JOIN pilots p ON p.id = c.pilot_id
  LEFT JOIN conversation_views cv 
         ON cv.conversation_id = c.id AND cv.user_id = $1
  LEFT JOIN last_msg lm 
         ON lm.conversation_id = c.id
  WHERE c.advertiser_id = $1
  ORDER BY lm.last_message_time DESC NULLS LAST
`, [advertiserId]);

    return res.json({ success: true, conversations: convRes.rows });
  } catch (err) {
    console.error('Error fetching advertiser conversations:', err);
    return res.status(500).json({ success: false, message: 'Server error' });
  }
});


app.get('/get-messages', async (req, res) => {
  const { conversationId } = req.query;

  try {
    const result = await pool.query(
      `SELECT 
         m.id, m.sender_id, m.message, m.created_at,
         CASE WHEN m.sender_id = c.pilot_id THEN p.email ELSE a.email END AS sender_email,
         CASE WHEN m.sender_id = c.pilot_id THEN 'pilot' ELSE 'advertiser' END AS sender_role
       FROM messages m
       JOIN conversations c ON c.id = m.conversation_id
       JOIN pilots p ON p.id = c.pilot_id
       JOIN advertisers a ON a.id = c.advertiser_id
       WHERE m.conversation_id = $1
       ORDER BY m.created_at ASC`,
      [conversationId]
    );

    res.json({ success: true, messages: result.rows });
  } catch (e) {
    console.error("Chyba p≈ôi naƒç√≠t√°n√≠ zpr√°v:", e);
    res.status(500).json({ success: false, message: 'Chyba p≈ôi naƒç√≠t√°n√≠ zpr√°v' });
  }
});


// Poƒçet nep≈ôeƒçten√Ωch zpr√°v pro pilota
app.get('/unread-count', async (req, res) => {
  try {
    const email =
      (req.query.pilotEmail || req.query.email || req.session?.email || '').toLowerCase();
    if (!email) return res.json({ count: 0 });

    const p = await pool.query('SELECT id FROM pilots WHERE LOWER(email) = $1', [email]);
    if (p.rowCount === 0) return res.json({ count: 0 });
    const pilotId = p.rows[0].id;

    const r = await pool.query(`
      SELECT COUNT(*)::int AS n
      FROM messages m
      JOIN conversations c ON c.id = m.conversation_id
      LEFT JOIN conversation_views cv
        ON cv.conversation_id = c.id AND cv.user_id = c.pilot_id
      WHERE c.pilot_id = $1
        AND m.sender_id = c.advertiser_id
        AND m.created_at > COALESCE(cv.last_seen, '1970-01-01'::timestamp)
    `, [pilotId]);

    res.json({ count: r.rows[0].n });
  } catch (e) {
    console.error('unread-count error', e);
    res.status(500).json({ count: 0 });
  }
});

// Vr√°t√≠ DB id podle e-mailu a role (pilot|advertiser)
app.get('/get-user-id', async (req, res) => {
  try {
    const { email, type } = req.query; // type: 'pilot' | 'advertiser'
    if (!email || !type) return res.status(400).json({ error: 'Missing email or type' });

    const lower = String(email).toLowerCase();
    const sql = type === 'pilot'
      ? 'SELECT id FROM pilots WHERE LOWER(email) = $1'
      : 'SELECT id FROM advertisers WHERE LOWER(email) = $1';

    const r = await pool.query(sql, [lower]);
    if (!r.rowCount) return res.status(404).json({ error: 'User not found' });

    res.json({ id: r.rows[0].id });
  } catch (e) {
    console.error('get-user-id error', e);
    res.status(500).json({ error: 'Failed to resolve user id' });
  }
});



app.post('/send-message', async (req, res) => {
  const { conversationId, senderEmail, message } = req.body;

  try {
    // 1) √öƒçastn√≠ci konverzace
    const convRes = await pool.query(
      'SELECT pilot_id, advertiser_id FROM conversations WHERE id = $1',
      [conversationId]
    );
    if (convRes.rowCount === 0) {
      return res.status(404).json({ success: false, message: 'Konverzace nenalezena' });
    }
    const { pilot_id, advertiser_id } = convRes.rows[0];

    // 2) Urƒçi roli odes√≠latele podle e-mailu a ovƒõ≈ô, ≈æe pat≈ô√≠ do t√©to konverzace
    const pilotRes = await pool.query('SELECT id FROM pilots WHERE email = $1', [senderEmail]);
    const advRes   = await pool.query('SELECT id FROM advertisers WHERE email = $1', [senderEmail]);

    let senderId = null;
    if (pilotRes.rowCount > 0 && pilotRes.rows[0].id === pilot_id) {
      senderId = pilot_id; // pos√≠l√° pilot
    } else if (advRes.rowCount > 0 && advRes.rows[0].id === advertiser_id) {
      senderId = advertiser_id; // pos√≠l√° inzerent
    } else {
      return res.status(403).json({ success: false, message: 'Odes√≠latel do konverzace nepat≈ô√≠' });
    }

    // 3) Ulo≈æ zpr√°vu
    const inserted = await pool.query(
      `INSERT INTO messages (conversation_id, sender_id, message)
       VALUES ($1, $2, $3)
       RETURNING id, sender_id, message, created_at`,
      [conversationId, senderId, message]
    );

    // 4) Vra≈• rovnou i sender_email a sender_role (frontend to hned obarv√≠ spr√°vnƒõ)
    const enriched = await pool.query(
      `SELECT 
         m.id, m.sender_id, m.message, m.created_at,
         CASE WHEN m.sender_id = c.pilot_id THEN p.email ELSE a.email END AS sender_email,
         CASE WHEN m.sender_id = c.pilot_id THEN 'pilot' ELSE 'advertiser' END AS sender_role
       FROM messages m
       JOIN conversations c ON c.id = m.conversation_id
       JOIN pilots p ON p.id = c.pilot_id
       JOIN advertisers a ON a.id = c.advertiser_id
       WHERE m.id = $1`,
      [inserted.rows[0].id]
    );

    return res.json({ success: true, newMessage: enriched.rows[0] });

  } catch (err) {
    console.error("Chyba p≈ôi odes√≠l√°n√≠ zpr√°vy:", err);
    res.status(500).json({ success: false, message: 'Chyba p≈ôi odes√≠l√°n√≠ zpr√°vy' });
  }
});



app.post('/create-conversation', async (req, res) => {
  const { pilotEmail, advertiserEmail } = req.body;

  try {
    // Get pilot and advertiser details from the database
    const pilotResult = await pool.query('SELECT id FROM pilots WHERE email = $1', [pilotEmail]);
    const advertiserResult = await pool.query('SELECT id FROM advertisers WHERE email = $1', [advertiserEmail]);

    if (pilotResult.rowCount === 0 || advertiserResult.rowCount === 0) {
      return res.status(400).json({ success: false, message: 'Pilot nebo inzerent nenalezen' });
    }

    const pilotId = pilotResult.rows[0].id;
    const advertiserId = advertiserResult.rows[0].id;

    // Check if a conversation already exists between this pilot and advertiser
    const existingConversation = await pool.query(
      'SELECT id FROM conversations WHERE pilot_id = $1 AND advertiser_id = $2 LIMIT 1',
      [pilotId, advertiserId]
    );

    let conversationId;

    if (existingConversation.rowCount > 0) {
      // If the conversation exists, use the existing conversationId
      conversationId = existingConversation.rows[0].id;
    } else {
      // If no conversation exists, create a new one
      const conversationResult = await pool.query(
        `INSERT INTO conversations (pilot_id, advertiser_id) 
         VALUES ($1, $2) 
         RETURNING id`,
        [pilotId, advertiserId]
      );
      conversationId = conversationResult.rows[0].id;
    }

    res.json({ success: true, conversationId });

  } catch (err) {
    console.error("Chyba p≈ôi vytv√°≈ôen√≠ konverzace:", err);
    res.status(500).json({ success: false, message: 'Chyba serveru p≈ôi vytv√°≈ôen√≠ konverzace' });
  }
});

app.post("/send-contact", async (req, res) => {
  const { name, email, message } = req.body;
  if (!name || !email || !message) {
    return res.status(400).send("Vypl≈àte v≈°echna pole.");
  }

  try {
    await transporter.sendMail({
  from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
  to: "dronadmin@seznam.cz",
  subject: "Nov√° zpr√°va z kontaktn√≠ho formul√°≈ôe",
  text: `Od: ${name} <${email}>\n\n${message}`,
  replyTo: email
});
    res.send("‚úÖ Zpr√°va byla odesl√°na.");
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi odes√≠l√°n√≠:", err);
    res.status(500).send("Nepoda≈ôilo se odeslat zpr√°vu: " + err.message);
  }
});




app.get('/blog/article/:id', async (req, res) => {
  const articleId = req.params.id;
  try {
    // Naƒçteme konkr√©tn√≠ ƒçl√°nek podle ID
    const result = await pool.query('SELECT * FROM articles WHERE id = $1', [articleId]);
    const article = result.rows[0];
    if (article) {
      res.render('article', { article });
    } else {
      res.status(404).send('ƒål√°nek nebyl nalezen');
    }
  } catch (err) {
    console.error('Chyba p≈ôi naƒç√≠t√°n√≠ ƒçl√°nku:', err);
    res.status(500).send('Chyba na serveru');
  }
});




// Get pilot's name by email
app.get('/get-pilot-name', async (req, res) => {
  const { email } = req.query;
  
  try {
    const result = await pool.query(
      'SELECT name FROM pilots WHERE email = $1',
      [email]
    );
    
    if (result.rowCount > 0) {
      res.json({ success: true, name: result.rows[0].name });
    } else {
      res.json({ success: false, message: 'Pilot not found' });
    }
  } catch (err) {
    console.error("Error fetching pilot name:", err);
    res.status(500).json({ success: false, message: 'Server error' });
  }
});


// Get all conversations for a pilot
app.get('/get-pilot-conversations', async (req, res) => {
  const { pilotEmail } = req.query;

  try {
    // First get pilot ID
    const pilotResult = await pool.query(
      'SELECT id FROM pilots WHERE email = $1',
      [pilotEmail]
    );

    if (pilotResult.rowCount === 0) {
      return res.json({ success: false, message: 'Pilot not found' });
    }

    const pilotId = pilotResult.rows[0].id;

    // Get all conversations with advertisers
    const conversations = await pool.query(`
      SELECT 
        c.id,
        a.email AS advertiser_email,
        a.name AS advertiser_name,
        (SELECT message FROM messages 
         WHERE conversation_id = c.id 
         ORDER BY created_at DESC LIMIT 1) AS last_message,
        (SELECT created_at FROM messages 
         WHERE conversation_id = c.id 
         ORDER BY created_at DESC LIMIT 1) AS last_message_time,
        EXISTS (
          SELECT 1 FROM messages 
          WHERE conversation_id = c.id 
          AND sender_id != $1 
          AND (created_at > (
            SELECT last_seen FROM conversation_views 
            WHERE conversation_id = c.id AND user_id = $1
            LIMIT 1
          ) OR NOT EXISTS (
            SELECT 1 FROM conversation_views 
            WHERE conversation_id = c.id AND user_id = $1
          ))
        ) AS unread
      FROM conversations c
      JOIN advertisers a ON c.advertiser_id = a.id
      WHERE c.pilot_id = $1
      ORDER BY last_message_time DESC NULLS LAST
    `, [pilotId]);

    res.json({
      success: true,
      conversations: conversations.rows
    });
  } catch (err) {
    console.error("Error fetching pilot conversations:", err);
    res.status(500).json({ success: false, message: 'Server error' });
  }
});

// Mark conversation as read
app.post('/mark-as-read', async (req, res) => {
  const { conversationId, userEmail } = req.body;
  if (!conversationId || !userEmail) {
    return res.status(400).json({ success: false, message: "Missing params" });
  }

  try {
    // Oznaƒç√≠me v≈°echny zpr√°vy v konverzaci, kter√© NEJSOU od u≈æivatele
    await pool.query(`
      UPDATE messages
      SET read = TRUE
      WHERE conversation_id = $1
        AND sender_email <> $2
        AND read = FALSE
    `, [conversationId, userEmail]);

    res.json({ success: true });
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi mark-as-read:", err);
    res.status(500).json({ success: false, error: err.message });
  }
});

app.post('/mark-as-seen', async (req, res) => {
  const { conversationId, userId } = req.body;
  console.log("üì© mark-as-seen:", conversationId, userId);   // DEBUG

  if (!conversationId || !userId) {
    return res.status(400).json({ success: false, message: "Missing params" });
  }

  try {
    await pool.query(`
      INSERT INTO conversation_views (conversation_id, user_id, last_seen)
      VALUES ($1, $2, NOW())
      ON CONFLICT (conversation_id, user_id)
      DO UPDATE SET last_seen = EXCLUDED.last_seen
    `, [conversationId, userId]);

    res.json({ success: true });
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi mark-as-seen:", err);
    res.status(500).json({ success: false, error: err.message });
  }
});




// Zmƒõna hesla (pilot)
app.post('/change-password', changePassLimiter, async (req, res) => {
  try {
    const { email, oldPassword, newPassword } = req.body;
    if (!email || !oldPassword || !newPassword) {
      return res.status(400).send('Chyb√≠ √∫daje.');
    }

    // (Voliteln√©, ale doporuƒçen√©) ‚Äì ovƒõ≈ô, ≈æe mƒõn√≠ heslo p≈ôihl√°≈°en√Ω u≈æivatel
    if (req.session?.email && req.session.email !== email) {
      return res.status(403).send('Nem≈Ø≈æe≈° mƒõnit heslo jin√©mu √∫ƒçtu.');
    }

    const r = await pool.query('SELECT id, password_hash FROM pilots WHERE email = $1', [email]);
    if (r.rowCount === 0) return res.status(404).send('U≈æivatel nenalezen.');

    const ok = await bcrypt.compare(oldPassword, r.rows[0].password_hash);
    if (!ok) return res.status(401).send('Star√© heslo nen√≠ spr√°vn√©.');

    const hash = await bcrypt.hash(newPassword, 10);
    await pool.query('UPDATE pilots SET password_hash = $1 WHERE email = $2', [hash, email]);

    return res.status(200).send('Heslo bylo √∫spƒõ≈°nƒõ zmƒõnƒõno.');
  } catch (err) {
    console.error('Chyba p≈ôi zmƒõnƒõ hesla:', err);
    return res.status(500).send('Chyba na serveru p≈ôi zmƒõnƒõ hesla');
  }
});

// Kdo je p≈ôihl√°≈°en jako inzerent (ze session)?
app.get('/get-my-advertiser', async (req, res) => {
  try {
    const email = (req.session?.email || '').toLowerCase();
    if (!email) return res.status(401).json({});

    const r = await pool.query('SELECT id, email, name FROM advertisers WHERE LOWER(email) = $1', [email]);
    if (r.rowCount === 0) return res.status(401).json({});
    res.json(r.rows[0]);
  } catch (e) {
    console.error('get-my-advertiser error', e);
    res.status(500).json({});
  }
});



// GET /poptavky ‚Äì ve≈ôejn√© i ‚Äûmoje‚Äú
app.get('/poptavky', async (req, res) => {
  try {
    const { region = '', mine = '0' } = req.query;
    const sessionEmail = (req.session?.email || '').toLowerCase();

    if (mine === '1' && sessionEmail) {
      // moje popt√°vky (nez√°visle na public)
      const r = await pool.query(
        `SELECT id, title, description, location, region, budget, deadline, advertiser_email, created_at
         FROM demands
         WHERE LOWER(advertiser_email) = $1
         ORDER BY created_at DESC`,
         [sessionEmail]
      );
      return res.json(r.rows);
    }

    // ve≈ôejn√© popt√°vky (volitelnƒõ s filtrem kraje)
    const params = [];
    let where = `public = TRUE`;
    if (region) { params.push(region); where += ` AND region = $${params.length}`; }

    const r = await pool.query(
      `SELECT id, title, description, location, region, budget, deadline, advertiser_email, created_at
       FROM demands
       WHERE ${where}
       ORDER BY created_at DESC`,
      params
    );
    res.json(r.rows);
  } catch (err) {
    console.error("Chyba p≈ôi naƒç√≠t√°n√≠ popt√°vek:", err);
    res.status(500).send("Chyba serveru p≈ôi naƒç√≠t√°n√≠ popt√°vek");
  }
});

// POST /poptavky ‚Äì vlo≈æen√≠ popt√°vky inzerentem
app.post('/poptavky', async (req, res) => {
  try {
     const { title, description, location, region, budget, deadline, public: isPublic } = req.body;
    const advertiser_email = (req.session?.email || '').toLowerCase();
    if (!advertiser_email) return res.status(401).send('Nep≈ôihl√°≈°en√Ω inzerent.');
    if (!title || !location) return res.status(400).send('Chyb√≠ povinn√° pole (n√°zev a lokalita).');

    const inserted = await pool.query(
      `INSERT INTO demands
       (title, description, location, region, budget, deadline, public, advertiser_email)
       VALUES ($1,$2,$3,$4,$5,$6,$7,$8)
       RETURNING id, title, description, location, region, budget, deadline, advertiser_email, created_at`,
      [
        title || null,
        description || null,
        location || null,
        region || null,
        Number.isFinite(+budget) ? +budget : null,
        deadline || null,
        isPublic !== false, // default true
        advertiser_email
      ]
    );

    res.status(201).json(inserted.rows[0]);
  } catch (err) {
    console.error('Chyba p≈ôi ukl√°d√°n√≠ popt√°vky:', err);
    res.status(500).send('Chyba serveru p≈ôi ukl√°d√°n√≠ popt√°vky');
  }
});

app.get('/__dbinfo', async (req,res) => {
  const r = await pool.query(`SELECT current_database(), current_user, inet_server_addr(), inet_server_port()`);
  res.json(r.rows[0]);
});


app.get('/categories', async (req, res) => {
  try {
    const { rows } = await pool.query('SELECT id, name FROM categories ORDER BY name');
    const fixed = rows.map(r => ({ ...r, name: bestUtfVariant(r.name) }));
    res.set('Content-Type', 'application/json; charset=utf-8');
    res.set('Cache-Control', 'no-store');
    res.json(fixed);
  } catch (err) {
    console.error('Chyba /categories:', err);
    res.status(500).json([]);
  }
});


// Nastaven√≠ slo≈æky pro statick√© soubory
app.use(express.static(path.join(__dirname, 'public')));

// pokud m√°≈° prerender, vynech ho pro /categories (nebo ho dej n√≠≈æ)
app.use((req, res, next) => {
  if (req.path.startsWith('/categories')) return next();
  return prerender(req, res, next);
});

// 1) prost√Ω UTF-8 ping (ovƒõ≈ô√≠ transport)
app.get('/utf8-ping', (req, res) => {
  res.setHeader('Content-Type', 'application/json; charset=utf-8');
  res.json({ sample: '≈†kolen√≠ pro pokroƒçil√© piloty ‚Äì √∫dr≈æba, mƒõ≈ôen√≠, zkou≈°ky' });
});

// 2) fingerprint DB + uk√°zka kategori√≠
app.get('/db-fingerprint', async (req, res) => {
  const meta = await pool.query(`
    SELECT current_database() AS db,
           current_user       AS "user",
           current_setting('server_version')  AS server_version,
           current_setting('server_encoding') AS server_encoding,
           current_setting('client_encoding') AS client_encoding
  `);
  const cnt = await pool.query('SELECT COUNT(*)::int AS n FROM categories');
  const sample = await pool.query('SELECT id, name FROM categories ORDER BY id LIMIT 5');
  res.setHeader('Content-Type', 'application/json; charset=utf-8');
  res.json({ meta: meta.rows[0], categories_count: cnt.rows[0].n, sample: sample.rows });
});


// Zmƒõna mailu
function buildChangeEmailEmail(oldEmail, newEmail) {
  return `
    <div style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
      <h2 style="color: #0077B6;">‚úâÔ∏è Zmƒõna e-mailov√© adresy</h2>
      <p style="font-size: 16px; color: #495057;">
        Dobr√Ω den,
      </p>
      <p style="font-size: 16px; color: #495057;">
        pr√°vƒõ byla provedena zmƒõna e-mailu va≈°eho √∫ƒçtu na <strong style="color:#0077B6;">NajdiPilota.cz</strong>.
      </p>

      <p style="font-size: 16px; color: #495057;">
        <strong>Star√Ω e-mail:</strong> ${oldEmail}<br>
        <strong>Nov√Ω e-mail:</strong> ${newEmail}
      </p>

      <p style="font-size: 16px; color: #495057;">
        Pokud jste tuto zmƒõnu provedli vy, nen√≠ pot≈ôeba ≈æ√°dn√° dal≈°√≠ akce.  
        Pokud jste zmƒõnu neprovedli, <strong style="color:red;">ihned n√°s kontaktujte</strong> na 
        <a href="mailto:dronadmin@seznam.cz" style="color:#0077B6;">dronadmin@seznam.cz</a>.
      </p>

      <hr style="margin:20px 0;">

      <p style="font-size: 14px; color: #6c757d;">
        Tento e-mail byl odesl√°n automaticky. Pros√≠me, neodpov√≠dejte na nƒõj p≈ô√≠mo.
      </p>

      <p style="font-size: 16px; color: #495057;">S pozdravem,<br>T√Ωm NajdiPilota.cz</p>
    </div>
  `;
}




// Funkce pro opravu k√≥dov√°n√≠ z datab√°ze
function fixDatabaseEncoding(str) {
  if (typeof str !== 'string') return str;
  
  // Opravy pro bƒõ≈æn√© probl√©my s k√≥dov√°n√≠m z datab√°ze
  const encodingMap = {
    '√É¬°': '√°', '√É¬©': '√©', '√É¬≠': '√≠', '√É¬≥': '√≥', '√É¬∫': '√∫', '√É¬Ω': '√Ω',
    '√É¬Å': '√Å', '√É¬â': '√â', '√É¬ç': '√ç', '√É¬ì': '√ì', '√É¬ö': '√ö', '√É¬ù': '√ù',
    '√É¬§': '√§', '√É¬´': '√´', '√É¬Ø': '√Ø', '√É¬∂': '√∂', '√É¬º': '√º',
    '√É¬Ñ': '√Ñ', '√É¬ã': '√ã', '√É¬è': '√è', '√É¬ñ': '√ñ', '√É¬ú': '√ú',
    '√É¬à': '√à', '√É¬ü': '√ü', '√É¬∞': '√∞', '√É¬¶': '√¶', '√Ç': '',
    '√¢‚Ç¨"': '‚Äî', '√¢‚Ç¨‚Äú': '‚Äì', '√¢‚Ç¨Àú': '‚Äò', '√¢‚Ç¨‚Ñ¢': '‚Äô', '√¢‚Ç¨≈ì': '‚Äú', '√¢‚Ç¨¬ù': '‚Äù',
    '√É¬Ω': '√Ω', '√É¬°': '√°', '√É¬©': '√©', '√É¬≠': '√≠', '√É¬≥': '√≥', '√É¬∫': '√∫',
    '√É¬Ø': '√Ø', '√É¬∂': '√∂', '√É¬º': '√º', '√É¬ß': '√ß', '√É¬∏': '√∏', '√É¬•': '√•',
    '√É¬±': '√±', '√É¬µ': '√µ', '√É¬™': '√™', '√É¬π': '√π', '√É¬¨': '√¨', '√É¬≤': '√≤',
    '√É¬¢': '√¢', '√É¬ª': '√ª', '√É¬Æ': '√Æ', '√É¬¥': '√¥', '√É¬®': '√®', '√É ': '√†'
  };
  
  let result = str;
  for (const [wrong, correct] of Object.entries(encodingMap)) {
    result = result.replace(new RegExp(wrong, 'g'), correct);
  }
  
  return result;
}


// PUT /poptavky/:id ‚Äì update jen vlastn√≠k
app.put('/poptavky/:id', async (req, res) => {
  try {
    const id = +req.params.id;
    const { title, description, location, region, budget, deadline, public: isPublic } = req.body;
    const advertiser_email = (req.session?.email || '').toLowerCase();
    if (!advertiser_email) return res.status(401).send("Nep≈ôihl√°≈°en√Ω inzerent.");

    const owner = await pool.query(`SELECT LOWER(advertiser_email) AS advertiser_email FROM demands WHERE id = $1`, [id]);

    if (owner.rowCount === 0) return res.status(404).send("Popt√°vka nenalezena.");
    if (owner.rows[0].advertiser_email !== advertiser_email) return res.status(403).send("Nesm√≠≈° upravovat ciz√≠ popt√°vku.");

    const r = await pool.query(
      `UPDATE demands SET
         title = COALESCE($2,title),
         description = COALESCE($3,description),
         location = COALESCE($4,location),
         region = COALESCE($5,region),
         budget = $6,
         deadline = $7,
         public = COALESCE($8, public)
       WHERE id = $1
       RETURNING id, title, description, location, region, budget, deadline, advertiser_email, created_at`,
      [id, title || null, description || null, location || null, region || null,
       Number.isFinite(+budget) ? +budget : null, deadline || null,
       typeof isPublic === 'boolean' ? isPublic : null]
    );
    res.json(r.rows[0]);
  } catch (err) {
    console.error("Chyba p≈ôi update popt√°vky:", err);
    res.status(500).send("Chyba serveru p≈ôi update popt√°vky");
  }
});

// DELETE /poptavky/:id ‚Äì s ovƒõ≈ôen√≠m vlastn√≠ka
app.delete('/poptavky/:id', async (req, res) => {
  try {
    const id = +req.params.id;
    const advertiser_email = (req.session?.email || '').toLowerCase();
    if (!advertiser_email) return res.status(401).send("Nep≈ôihl√°≈°en√Ω inzerent.");

    const owner = await pool.query(`SELECT LOWER(advertiser_email) AS advertiser_email FROM demands WHERE id = $1`, [id]);
    if (owner.rowCount === 0) return res.status(404).send("Popt√°vka nenalezena.");
    if (owner.rows[0].advertiser_email !== advertiser_email) return res.status(403).send("Nesm√≠≈° mazat ciz√≠ popt√°vku.");

    await pool.query(`DELETE FROM demands WHERE id = $1`, [id]);
    res.json({ success: true });
  } catch (err) {
    console.error("Chyba p≈ôi maz√°n√≠ popt√°vky:", err);
    res.status(500).send("Chyba serveru p≈ôi maz√°n√≠ popt√°vky");
  }
});


app.get('/send-expiry-emails', async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT email, visible_valid 
      FROM pilots 
      WHERE visible_valid IS NOT NULL
    `);

    for (const pilot of result.rows) {
      const daysLeft = Math.ceil(
        (new Date(pilot.visible_valid) - new Date()) / (1000 * 60 * 60 * 24)
      );

      if (daysLeft === 7) {
        await transporter.sendMail({
          from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
          to: pilot.email,
          bcc: 'drboom@seznam.cz',
          subject: "Va≈°e ƒçlenstv√≠ vypr≈°√≠ za 7 dn√≠",
          html: membershipExpiry7DaysEmail(pilot.email)
        });
      }

      if (daysLeft === 3) {
        await transporter.sendMail({
          from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
          to: pilot.email,
          bcc: 'drboom@seznam.cz',
          subject: "Va≈°e ƒçlenstv√≠ vypr≈°√≠ za 3 dny",
          html: membershipExpiry3DaysEmail(pilot.email)
        });
      }
    }

    res.send("‚úÖ Expiraƒçn√≠ e-maily byly odesl√°ny.");
  } catch (err) {
    console.error("Chyba p≈ôi odes√≠l√°n√≠ expiraƒçn√≠ch e-mail≈Ø:", err);
    res.status(500).send("‚ùå Chyba p≈ôi odes√≠l√°n√≠.");
  }
});

app.post('/admin-send-gdpr-reminder', requireAdminLogin, async (req, res) => {
    try {
        // Zkontroluj, zda je p≈ôipojen emailov√Ω server
        await transporter.verify(); // Tato funkce ovƒõ≈ôuje p≈ôipojen√≠ k serveru
        console.log('Email server connection is ready');

        // Definov√°n√≠ promƒõnn√© pro piloty (z√≠sk√°n√≠ pilot≈Ø z DB)
        let query = `
            SELECT p.id, p.email, p.name, p.type_account
            FROM pilots p
            LEFT JOIN consents c ON p.id = c.user_id AND c.consent_type = 'public_contact'
            WHERE p.type_account IN ('Premium', 'Basic') -- Vyb√≠r√° v≈°echny piloty s tƒõmito typy √∫ƒçt≈Ø
        `;
        
        let queryParams = [];

        // Pokud je posl√°no pole 'ids', p≈ôid√°me podm√≠nku pro konkr√©tn√≠ piloty
        if (req.body.ids && req.body.ids.length > 0) {
            query += ` AND p.id IN (${req.body.ids.map((_, i) => `$${i + 1}`).join(',')})`;
            queryParams = [...req.body.ids];
        }

        // Spust√≠ dotaz na z√≠sk√°n√≠ v≈°ech pilot≈Ø
        const result = await pool.query({
            text: query,
            values: queryParams,
            timeout: 10000 // 10 sekundy timeout
        });

        const pilotsWithoutConsent = result.rows;  // Seznam v≈°ech pilot≈Ø, vƒçetnƒõ tƒõch, kte≈ô√≠ ji≈æ maj√≠ GDPR souhlas

        if (pilotsWithoutConsent.length === 0) {
            return res.send("≈Ω√°dn√≠ piloti nevy≈æaduj√≠ p≈ôipomenut√≠ GDPR souhlasu.");
        }

        let successCount = 0;
        let failedEmails = [];

        // Pos√≠l√°n√≠ GDPR p≈ôipom√≠nek pilot≈Øm
        for (const pilot of pilotsWithoutConsent) {
    try {
        const emailContent = {
            from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
            to: pilot.email,
            subject: "D≈Øle≈æit√° informace k va≈°emu √∫ƒçtu na NajdiPilota.cz ‚Äì Pot≈ôebujeme v√°≈° souhlas s GDPR",
            html: `
                <div style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
                    <h2 style="color: #0077B6;">D≈Øle≈æit√° informace k va≈°emu √∫ƒçtu na NajdiPilota.cz</h2>
                    <p style="font-size: 16px; color: #495057;">Dobr√Ω den, <strong>${pilot.name}</strong>,</p>
                    <p style="font-size: 16px; color: #495057;">
                        Dƒõkujeme, ≈æe jste souƒç√°st√≠ komunity <strong style="color: #0077B6;">NajdiPilota.cz</strong>.
                    </p>
                    <p style="font-size: 16px; color: #495057;">
                        V√°≈° √∫ƒçet je <strong style="color: #258f01">${pilot.type_account}</strong>, ale chyb√≠ n√°m v√°≈° souhlas se zobrazen√≠m kontakt≈Ø.
                    </p>
                    <p style="font-size: 16px; color: #495057;">
                        Pokud chcete udƒõlit souhlas s GDPR, kliknƒõte na tento odkaz:
                    </p>
                    <p style="font-size: 16px; color: #495057;">
                        <a href="https://www.najdipilota.cz/index.html" style="font-size: 18px; color: #0077B6; text-decoration: none;">Kliknƒõte zde pro p≈ôihl√°≈°en√≠ a udƒõlen√≠ souhlasu s GDPR</a>
                    </p>
                    <p style="font-size: 16px; color: #495057;">
                        Po p≈ôihl√°≈°en√≠ na str√°nce budete m√≠t mo≈ænost souhlas s GDPR udƒõlit.
                    </p>
                    <p style="font-size: 16px; color: #495057;">
                        Pokud m√°te jak√©koliv dotazy nebo pot≈ôebujete dal≈°√≠ informace, nev√°hejte n√°s kontaktovat na <a href="mailto:dronadmin@seznam.cz" style="color: #0077B6;">dronadmin@seznam.cz</a>.
                    </p>
                    <p style="font-size: 16px; color: #495057;">
                        Dƒõkujeme v√°m za spolupr√°ci a tƒõ≈°√≠me se na dal≈°√≠ spolupr√°ci!
                    </p>

                    <p style="font-size: 16px; color: #495057;">
                        S pozdravem,<br />T√Ωm NajdiPilota.cz
                    </p>

                    <p style="font-size: 14px; color: #6c757d;">
                        Tento e-mail je automaticky generov√°n na z√°kladƒõ va≈°eho √∫ƒçtu na NajdiPilota.cz. Pokud nem√°te z√°jem o tuto p≈ôipom√≠nku, ignorujte pros√≠m tento e-mail.
                    </p>
                    <p style="font-size: 14px; color: #6c757d;">
                        <a href="https://www.najdipilota.cz/o-projektu.html" style="color: #0077B6;">O projektu</a> | <a href="https://www.najdipilota.cz/faq.html" style="color: #0077B6;">FAQ</a>
                    </p>
                </div>
            `,
            text: `
                Dobr√Ω den ${pilot.name},

                Dƒõkujeme, ≈æe jste souƒç√°st√≠ komunity NajdiPilota.cz.

                V√°≈° √∫ƒçet je ${pilot.type_account}, ale chyb√≠ n√°m v√°≈° souhlas se zobrazen√≠m kontakt≈Ø.

                Pokud chcete udƒõlit souhlas s GDPR, p≈ôihlaste se na n√°sleduj√≠c√≠m odkazu:
                https://www.najdipilota.cz/index.html

                Po p≈ôihl√°≈°en√≠ budete m√≠t mo≈ænost souhlas s GDPR udƒõlit.

                Pokud m√°te jak√©koliv dotazy nebo pot≈ôebujete dal≈°√≠ informace, kontaktujte n√°s na: dronadmin@seznam.cz

                S pozdravem,
                T√Ωm NajdiPilota.cz

                Tento e-mail je automaticky generov√°n na z√°kladƒõ va≈°eho √∫ƒçtu na NajdiPilota.cz. Pokud nem√°te z√°jem o tuto p≈ôipom√≠nku, ignorujte pros√≠m tento e-mail.

                Pro v√≠ce informac√≠ nav≈°tivte:
                - O projektu: https://www.najdipilota.cz/o-projektu.html
                - FAQ: https://www.najdipilota.cz/faq.html
            `
        };

        await transporter.sendMail(emailContent);  // Odesl√°n√≠ emailu
        successCount++;
        console.log(`‚úÖ GDPR reminder sent to: ${pilot.email}`);

        await new Promise(resolve => setTimeout(resolve, 500));  // Mal√© zpo≈ædƒõn√≠ mezi e-maily
    } catch (err) {
        console.error(`‚ùå Error sending to ${pilot.email}:`, err.message);
        failedEmails.push(pilot.email);
    }
}

        // Vytvo≈ôen√≠ odpovƒõdi
        let response = `GDPR p≈ôipom√≠nky odesl√°ny: ${successCount} √∫spƒõ≈°nƒõ z ${pilotsWithoutConsent.length} pilot≈Ø.`;
        
        if (failedEmails.length > 0) {
            response += `\n\nNepoda≈ôilo se odeslat na: ${failedEmails.join(', ')}`;
        }

        res.send(response);

    } catch (err) {
        console.error("‚ùå Chyba p≈ôi odes√≠l√°n√≠ GDPR p≈ôipom√≠nek:", err);
        res.status(500).send(`Chyba p≈ôi odes√≠l√°n√≠: ${err.message}`);
    }
});


// Route pro p≈ô√≠stup k 'onlymap.html'
app.get('/onlymap.html', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'onlymap.html'));
});

// Route pro p≈ô√≠stup k 'chat.html' ve slo≈æce 'onlymap.html'
app.get('/onlymap.html/chat.html', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'chat.html'));
});

// V√Ωchoz√≠ route
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Spu≈°tƒõn√≠ serveru
const PORT = process.env.PORT || 3000;
app.use((err, req, res, next) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
  next();
    console.error('‚ùå Chyba:', err.stack);
    res.status(500).json({ error: 'Intern√≠ chyba serveru' });
});
app.listen(PORT, () => {
  console.log(`Server bƒõ≈æ√≠ na portu ${PORT}`);
});

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// CRON: Ka≈æd√Ω den v 08:00 ode≈°le expiraƒçn√≠ e-maily (Europe/Prague)
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
cron.schedule(
  '0 8 * * *',
  async () => {
    console.log('‚è∞ CRON: kontrola expirac√≠ ƒçlenstv√≠‚Ä¶');

    try {
      const { rows } = await pool.query(`
        SELECT email, visible_valid::date AS valid_to,
               (visible_valid::date - CURRENT_DATE) AS days_left
        FROM pilots
        WHERE visible_valid IS NOT NULL
      `);

      for (const pilot of rows) {
        const daysLeft = Number(pilot.days_left);

        // P≈ôeskoƒç, pokud nen√≠ 7 nebo 3 dn√≠
        if (![7, 3].includes(daysLeft)) continue;

        // Zkontroluj, jestli u≈æ byl e-mail posl√°n
        const logCheck = await pool.query(
          `SELECT 1 FROM membership_email_log 
           WHERE email = $1 AND days_left = $2 
           AND sent_at::date = CURRENT_DATE`,
          [pilot.email, daysLeft]
        );

        if (logCheck.rowCount > 0) {
          console.log(`‚è≠ U≈æ odesl√°no dnes (${daysLeft} dn√≠): ${pilot.email}`);
          continue;
        }
        
        // Odesl√°n√≠ e-mailu
const refCode = makeRefCode(pilot.id); // üîë stejn√Ω k√≥d jako vrac√≠ /ref-code

if (daysLeft === 7) {
  await transporter.sendMail({
    from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
    to: pilot.email,
    subject: 'Va≈°e ƒçlenstv√≠ vypr≈°√≠ za 7 dn√≠',
    html: membershipExpiry7DaysEmail(refCode)   // sem jde referral k√≥d
  });
} else if (daysLeft === 3) {
  await transporter.sendMail({
    from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
    to: pilot.email,
    subject: 'Va≈°e ƒçlenstv√≠ vypr≈°√≠ za 3 dny',
    html: membershipExpiry3DaysEmail(refCode)   // sem jde referral k√≥d
  });
} else if (daysLeft === 0) {
  await transporter.sendMail({
    from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
    to: pilot.email,
    subject: 'Va≈°e ƒçlenstv√≠ dnes vypr≈°√≠',
    html: membershipExpiry0DaysEmail(refCode)
  });
}

        // Zaloguj odesl√°n√≠
        await pool.query(
          `INSERT INTO membership_email_log (email, days_left) VALUES ($1, $2)`,
          [pilot.email, daysLeft]
        );

        console.log(`üìß Odesl√°no a zalogov√°no (${daysLeft} dn√≠): ${pilot.email}`);
      }

      console.log('‚úÖ CRON hotovo.');
    } catch (err) {
      console.error('‚ùå Chyba CRONu p≈ôi odes√≠l√°n√≠ expiraƒçn√≠ch e-mail≈Ø:', err);
    }
  },
  { timezone: 'Europe/Prague' }
);

// === emaily prodlou≈æen√≠
// === 1 MƒöS√çC ===
app.get('/send-membership-email-1m', async (req, res) => {
  const { id } = req.query;
  if (!id) return res.status(400).send("Chyb√≠ ID pilota.");

  try {
    const result = await pool.query(
      "SELECT email, name, visible_valid, visible_payment, type_account FROM pilots WHERE id = $1",
      [id]
    );
    if (result.rowCount === 0) return res.status(404).send("Pilot nenalezen.");

    const pilot = result.rows[0];
    const content = `
      <h2 style="color:#258f01;">‚úÖ ƒålenstv√≠ prodlou≈æeno o 1 mƒõs√≠c</h2>
      <p>Dobr√Ω den, ${pilot.name || ""},</p>
      <p>dƒõkujeme, ≈æe jste si na <strong>NajdiPilota.cz</strong> prodlou≈æil sv√© ƒçlenstv√≠.</p>
      <p><strong>Platnost nyn√≠ konƒç√≠:</strong> ${new Date(pilot.visible_valid).toLocaleDateString("cs-CZ")}<br>
         <strong>Posledn√≠ platba:</strong> ${pilot.visible_payment 
           ? new Date(pilot.visible_payment).toLocaleDateString("cs-CZ") 
           : "N/A"}</p>
      <hr>
      <h3 style="color:#0077B6;">‚ÑπÔ∏è Tip: Sledujte sv≈Øj profil</h3>
      <p>V profilu v≈ædy najdete mo≈ænost prodlou≈æen√≠ i aktu√°ln√≠ stav sv√©ho ƒçlenstv√≠.</p>
      <p><a href="https://www.najdipilota.cz/subscription.html" style="color:#0077B6;">Mo≈ænosti p≈ôedplatn√©ho</a></p>
    `;
    const html = wrapEmailContent(content, "Prodlou≈æen√≠ ƒçlenstv√≠ o 1 mƒõs√≠c");

    await transporter.sendMail({
      from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
      to: pilot.email,
      bcc: 'drboom@seznam.cz',
      subject: 'Va≈°e ƒçlenstv√≠ bylo prodlou≈æeno o 1 mƒõs√≠c',
      html
    });

    res.send(`‚úÖ Email (1 mƒõs√≠c) byl odesl√°n na ${pilot.email} (BCC: drboom@seznam.cz).`);
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi odes√≠l√°n√≠ emailu:", err);
    res.status(500).send("Nepoda≈ôilo se odeslat email.");
  }
});


// === 6 MƒöS√çC≈Æ ===
app.get('/send-membership-email-6m', async (req, res) => {
  const { id } = req.query;
  if (!id) return res.status(400).send("Chyb√≠ ID pilota.");

  try {
    const result = await pool.query(
      "SELECT email, name, visible_valid, visible_payment, type_account FROM pilots WHERE id = $1",
      [id]
    );
    if (result.rowCount === 0) return res.status(404).send("Pilot nenalezen.");

    const pilot = result.rows[0];
    const content = `
      <h2 style="color:#258f01;">‚úÖ ƒålenstv√≠ prodlou≈æeno o 6 mƒõs√≠c≈Ø</h2>
      <p>Dobr√Ω den, ${pilot.name || ""},</p>
      <p>v√°≈æ√≠me si toho, ≈æe jste si prodlou≈æil sv√© ƒçlenstv√≠ na <strong>NajdiPilota.cz</strong>.</p>
      <p><strong>Platnost nyn√≠ konƒç√≠:</strong> ${new Date(pilot.visible_valid).toLocaleDateString("cs-CZ")}<br>
         <strong>Posledn√≠ platba:</strong> ${pilot.visible_payment 
           ? new Date(pilot.visible_payment).toLocaleDateString("cs-CZ") 
           : "N/A"}</p>
      <hr>
      <h3 style="color:#0077B6;">üí° Tip pro v√°s</h3>
      <p>Vyu≈æijte v≈°ech v√Ωhod dlouhodob√©ho ƒçlenstv√≠ ‚Äì v√°≈° profil je viditeln√Ω pro z√°jemce nep≈ôetr≈æitƒõ.</p>
      <p><a href="https://www.najdipilota.cz/subscription.html" style="color:#0077B6;">Mo≈ænosti p≈ôedplatn√©ho</a></p>
    `;
    const html = wrapEmailContent(content, "Prodlou≈æen√≠ ƒçlenstv√≠ o 6 mƒõs√≠c≈Ø");

    await transporter.sendMail({
      from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
      to: pilot.email,
      bcc: 'drboom@seznam.cz',
      subject: 'Va≈°e ƒçlenstv√≠ bylo prodlou≈æeno o 6 mƒõs√≠c≈Ø',
      html
    });

    res.send(`‚úÖ Email (6 mƒõs√≠c≈Ø) byl odesl√°n na ${pilot.email} (BCC: drboom@seznam.cz).`);
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi odes√≠l√°n√≠ emailu:", err);
    res.status(500).send("Nepoda≈ôilo se odeslat email.");
  }
});


// === 12 MƒöS√çC≈Æ ===
app.get('/send-membership-email-12m', async (req, res) => {
  const { id } = req.query;
  if (!id) return res.status(400).send("Chyb√≠ ID pilota.");

  try {
    const result = await pool.query(
      "SELECT email, name, visible_valid, visible_payment, type_account FROM pilots WHERE id = $1",
      [id]
    );
    if (result.rowCount === 0) return res.status(404).send("Pilot nenalezen.");

    const pilot = result.rows[0];
    const content = `
      <h2 style="color:#8f06bd;">üéâ ƒålenstv√≠ prodlou≈æeno o 12 mƒõs√≠c≈Ø</h2>
      <p>Dobr√Ω den, ${pilot.name || ""},</p>
      <p>dƒõkujeme, ≈æe jste s n√°mi! Va≈°e ƒçlenstv√≠ na <strong>NajdiPilota.cz</strong> bylo √∫spƒõ≈°nƒõ prodlou≈æeno.</p>
      <p><strong>Platnost nyn√≠ konƒç√≠:</strong> ${new Date(pilot.visible_valid).toLocaleDateString("cs-CZ")}<br>
         <strong>Posledn√≠ platba:</strong> ${pilot.visible_payment 
           ? new Date(pilot.visible_payment).toLocaleDateString("cs-CZ") 
           : "N/A"}</p>
      <hr>
      <h3 style="color:#258f01;">üéÅ P≈ôiveƒète kamar√°da a z√≠skejte +7 dn√≠ zdarma!</h3>
      <p>Pozvƒõte kamar√°da p≈ôes tento odkaz:</p>
      <div style="background:#f1f1f1;padding:10px;text-align:center;border-radius:6px;">
        https://www.najdipilota.cz/register.html?ref=${encodeURIComponent(pilot.id)}
      </div>
    `;
    const html = wrapEmailContent(content, "Prodlou≈æen√≠ ƒçlenstv√≠ o 12 mƒõs√≠c≈Ø");

    await transporter.sendMail({
      from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
      to: pilot.email,
      bcc: 'drboom@seznam.cz',
      subject: 'Va≈°e ƒçlenstv√≠ bylo prodlou≈æeno o 12 mƒõs√≠c≈Ø',
      html
    });

    res.send(`‚úÖ Email (12 mƒõs√≠c≈Ø) byl odesl√°n na ${pilot.email} (BCC: drboom@seznam.cz).`);
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi odes√≠l√°n√≠ emailu:", err);
    res.status(500).send("Nepoda≈ôilo se odeslat email.");
  }
});







// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// CRON: Denn√≠ souhrn nep≈ôeƒçten√Ωch zpr√°v (Europe/Prague) ‚Äì 07:30
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
cron.schedule(
  '30 7 * * *',
  async () => {
    console.log('‚è∞ CRON: denn√≠ digest nep≈ôeƒçten√Ωch zpr√°v‚Ä¶');
    try {
      // 1) piloti s e-mailem
      const pilotsRes = await pool.query(`
        SELECT id, email, COALESCE(NULLIF(name,''), 'Pilot') AS name
        FROM pilots
        WHERE email IS NOT NULL AND email <> ''
      `);

      for (const pilot of pilotsRes.rows) {
        // 2) vyhodno≈• nep≈ôeƒçten√© zpr√°vy (od inzerenta) per konverzace
        const unreadRes = await pool.query(`
          SELECT 
            c.id AS conversation_id,
            a.email AS advertiser_email,
            a.name  AS advertiser_name,
            COUNT(m.*) AS unread_count,
            MAX(m.created_at) AS last_time,
            (
              SELECT m2.message
              FROM messages m2
              WHERE m2.conversation_id = c.id
                AND m2.sender_id = c.advertiser_id
                AND m2.created_at > COALESCE(cv.last_seen, '1970-01-01'::timestamp)
              ORDER BY m2.created_at DESC
              LIMIT 1
            ) AS last_message
          FROM conversations c
          JOIN advertisers a 
            ON a.id = c.advertiser_id
          LEFT JOIN conversation_views cv 
            ON cv.conversation_id = c.id AND cv.user_id = c.pilot_id  -- last_seen pro PILOTA
          JOIN messages m 
            ON m.conversation_id = c.id
           AND m.sender_id = c.advertiser_id         -- pouze zpr√°vy od inzerenta
           AND m.created_at > COALESCE(cv.last_seen, '1970-01-01'::timestamp)
          WHERE c.pilot_id = $1
          GROUP BY c.id, a.email, a.name, cv.last_seen
          ORDER BY last_time DESC
        `, [pilot.id]);

        if (unreadRes.rowCount === 0) {
          // nic nep≈ôeƒçten√©ho ‚Üí nic nepos√≠l√°me
          continue;
        }

        // 3) postav e-mail
        const items = unreadRes.rows.map(r => ({
          conversationId: r.conversation_id,
          advertiserEmail: r.advertiser_email,
          advertiserName: r.advertiser_name || r.advertiser_email,
          unreadCount: Number(r.unread_count),
          lastMessage: (r.last_message || '').slice(0, 300), // o≈ô√≠znout pro jistotu
          lastTime: new Date(r.last_time)
        }));

        const html = buildUnreadDigestEmail(pilot.name, items);
        const text = buildUnreadDigestText(pilot.name, items);

        // 4) po≈°li e-mail
        await transporter.sendMail({
          from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
          to: pilot.email,
          bcc: 'drboom@seznam.cz',
          subject: `M√°te ${items.reduce((a,b)=>a+b.unreadCount,0)} nep≈ôeƒçten√Ωch zpr√°v`,
          html,
          text
        });

        console.log(`üìß Digest posl√°n: ${pilot.email} (${items.length} vl√°kna)`);
      }

      console.log('‚úÖ CRON denn√≠ho digestu hotov.');
    } catch (err) {
      console.error('‚ùå Chyba CRONu (digest):', err);
    }
  },
  { timezone: 'Europe/Prague' }
);

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// CRON: Nov√© popt√°vky ‚Üí 10:00 Europe/Prague ‚Üí poslat Basic/Premium
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
cron.schedule(
  '0 10 * * *',
  async () => {
    console.log('‚è∞ [CRON] Rozes√≠l√°m nov√© popt√°vky (posledn√≠ch 24h)‚Ä¶');
    try {
      // 1) Nov√© ve≈ôejn√© popt√°vky za posledn√≠ch 24 hodin (ƒças v Praze)
      const demandsRes = await pool.query(`
        SELECT id, title, description, location, region, budget, deadline, advertiser_email, created_at
        FROM demands
        WHERE public = TRUE
          AND created_at >= (NOW() AT TIME ZONE 'Europe/Prague') - INTERVAL '24 hours'
        ORDER BY created_at DESC
      `);

      if (demandsRes.rowCount === 0) {
        console.log('‚ÑπÔ∏è [CRON] ≈Ω√°dn√© nov√© popt√°vky za posledn√≠ch 24h ‚Üí neodes√≠l√°m nic.');
        return;
      }
      const demands = demandsRes.rows;

      // 2) V≈°ichni piloti Basic / Premium s e-mailem
      const pilotsRes = await pool.query(`
        SELECT id, COALESCE(NULLIF(name,''), 'Pilot') AS name, email
        FROM pilots
        WHERE type_account IN ('Basic','Premium')
          AND email IS NOT NULL AND email <> ''
      `);

      // 3) Odeslat ka≈æd√©mu (personalizovanƒõ)
      let success = 0;
      for (const p of pilotsRes.rows) {
        try {
          const html = buildNewDemandsDigestEmailFancy(p.name, demands);
          const text = buildNewDemandsDigestText(p.name, demands);

          await transporter.sendMail({
            from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
            to: p.email,
            bcc: 'drboom@seznam.cz',
            subject: 'Nov√© popt√°vky na NajdiPilota.cz (posledn√≠ch 24 h)',
            html,
            text
          });

          success++;
          // drobn√° prodleva, a≈• nejsme agresivn√≠ na SMTP
          await new Promise(r => setTimeout(r, 200));
        } catch (e) {
          console.error(`‚ùå [CRON] Nepoda≈ôilo se poslat ${p.email}:`, e.message);
        }
      }

      console.log(`‚úÖ [CRON] Rozesl√°no ${success}/${pilotsRes.rowCount} pilot≈Øm.`);
    } catch (err) {
      console.error('‚ùå [CRON] Chyba rozes√≠lky nov√Ωch popt√°vek:', err);
    }
  },
  { timezone: 'Europe/Prague' }
);





// Testovac√≠ SKRIPTA

// Testovac√≠ endpoint pro expiraƒçn√≠ e-mail
app.get('/test-expiry-email', async (req, res) => {
  const { email, days } = req.query;
  if (!email || !days) {
    return res.status(400).send("Pou≈æij ?email=...&days=7, 3 nebo 0");
  }

  try {
    let subject, html, text;

    if (days === '7') {
      subject = "Test: Va≈°e ƒçlenstv√≠ vypr≈°√≠ za 7 dn√≠";
      html = membershipExpiry7DaysEmail("Testovac√≠ Pilot");
      text = "Testovac√≠ text ‚Äì ƒçlenstv√≠ vypr≈°√≠ za 7 dn√≠";
    } else if (days === '3') {
      subject = "Test: Va≈°e ƒçlenstv√≠ vypr≈°√≠ za 3 dny";
      html = membershipExpiry3DaysEmail("Testovac√≠ Pilot");
      text = "Testovac√≠ text ‚Äì ƒçlenstv√≠ vypr≈°√≠ za 3 dny";
    } else if (days === '0') {
      subject = "Test: Va≈°e ƒçlenstv√≠ dnes vypr≈°√≠";
      html = membershipExpiry0DaysEmail("Testovac√≠ Pilot");
      text = "Testovac√≠ text ‚Äì ƒçlenstv√≠ vypr≈°√≠ dnes";
    } else {
      return res.status(400).send("days mus√≠ b√Ωt 7, 3 nebo 0");
    }

    await transporter.sendMail({
      from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
      to: email,
      subject,
      html,
      text
    });

    res.send(`üì® Testovac√≠ expiraƒçn√≠ e-mail (${days} dn√≠) posl√°n na ${email}`);
  } catch (err) {
    console.error("Chyba v /test-expiry-email:", err);
    res.status(500).send("Nepoda≈ôilo se odeslat testovac√≠ mail");
  }
});



// Testovac√≠ endpoint pro okam≈æit√© odesl√°n√≠ digestu
app.get('/test-digest', async (req, res) => {
  const { email } = req.query;
  if (!email) return res.status(400).send("Chyb√≠ email pilota");

  try {
    // Najdi pilota
    const pilotRes = await pool.query(
      'SELECT id, name, email FROM pilots WHERE LOWER(email) = LOWER($1)',
      [email]
    );
    if (pilotRes.rowCount === 0) {
      return res.status(404).send("Pilot nenalezen");
    }
    const pilot = pilotRes.rows[0];

    // Nep≈ôeƒçten√© zpr√°vy
    const unreadRes = await pool.query(`
      WITH last_msgs AS (
        SELECT DISTINCT ON (c.advertiser_id)
               c.advertiser_id,
               m.message    AS lastMessage,
               m.created_at AS lastTime
        FROM messages m
        JOIN conversations c ON c.id = m.conversation_id
        WHERE c.pilot_id = $1
          AND m.sender_id = c.advertiser_id
        ORDER BY c.advertiser_id, m.created_at DESC
      ),
      unread_counts AS (
        SELECT a.id AS advertiser_id,
               COUNT(*) AS unreadCount
        FROM messages m
        JOIN conversations c ON c.id = m.conversation_id
        JOIN advertisers a ON a.id = c.advertiser_id
        LEFT JOIN conversation_views cv
          ON cv.conversation_id = c.id AND cv.user_id = c.pilot_id
        WHERE c.pilot_id = $1
          AND m.sender_id = c.advertiser_id
          AND m.created_at > COALESCE(cv.last_seen, '1970-01-01'::timestamp)
        GROUP BY a.id
      )
      SELECT a.name  AS advertiserName,
             a.email AS advertiserEmail,
             uc.unreadCount,
             lm.lastMessage,
             lm.lastTime
      FROM unread_counts uc
      JOIN advertisers a ON a.id = uc.advertiser_id
      LEFT JOIN last_msgs lm ON lm.advertiser_id = uc.advertiser_id
      ORDER BY lm.lastTime DESC NULLS LAST;
    `, [pilot.id]);

    if (unreadRes.rowCount === 0) {
      return res.send("‚úÖ ≈Ω√°dn√© nep≈ôeƒçten√© zpr√°vy ‚Äì e-mail se neposlal.");
    }

    const items = unreadRes.rows.map(r => ({
      advertiserName: r.advertisername,
      advertiserEmail: r.advertiseremail,
      unreadCount: r.unreadcount,
      lastMessage: r.lastmessage,
      lastTime: r.lasttime
    }));

    await transporter.sendMail({
      from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
      to: pilot.email,
      subject: "Souhrn nep≈ôeƒçten√Ωch zpr√°v ‚Äì testovac√≠ odesl√°n√≠",
      html: buildUnreadDigestEmail(pilot.name, items),
      text: buildUnreadDigestText(pilot.name, items)
    });

    res.send(`üì® Digest byl odesl√°n na ${pilot.email} (${items.length} konverzac√≠).`);
  } catch (err) {
    console.error("Chyba v /test-digest:", err);
    res.status(500).send("Chyba p≈ôi odes√≠l√°n√≠ digestu");
  }
});


// ---------------------------------------------------------------------
// Jednotn√Ω wrapper pro v≈°echny e-maily
// ---------------------------------------------------------------------
function wrapEmailContent(innerHtml, title = "NajdiPilota.cz") {
  return `
<div style="font-family:'Poppins','Segoe UI',sans-serif;background:#F8F9FA;padding:0;margin:0;">
  <!-- Header -->
  <div style="background:#0077B6;color:#fff;padding:16px 20px;text-align:center;">
    <h1 style="margin:0;font-size:20px;font-weight:600;">${title}</h1>
  </div>

  <!-- Content -->
  <div style="background:#fff;padding:20px;color:#495057;font-size:15px;line-height:1.6;">
    ${innerHtml}
  </div>

  <!-- Footer -->
  <div style="background:#F1F1F1;color:#6c757d;font-size:12px;padding:12px;text-align:center;">
    ¬© 2025 NajdiPilota.cz ‚Äì Automatick√° notifikace
  </div>
</div>`;
}

// ---------------------------------------------------------------------
// Onboarding e-mail ‚Äì zachov√°ny v≈°echny barvy √∫ƒçt≈Ø
// ---------------------------------------------------------------------
function onboardingEmailContent() {
  const content = `
    <p>Dƒõkujeme, ≈æe jste se zaregistrovali na 
       <strong style="color:#0077B6;">NajdiPilota.cz</strong>! 
       Jsme r√°di, ≈æe se p≈ôipojujete k na≈°√≠ komunitƒõ profesion√°ln√≠ch pilot≈Ø dron≈Ø.</p>

    <h2 style="color:#0077B6;font-size:17px;margin-top:20px;">Jak zaƒç√≠t?</h2>
    <ul style="padding-left:20px;">
      <li><strong>Dokonƒçete sv≈Øj profil:</strong> Aktu√°ln√≠ √∫daje pomohou klient≈Øm v√°s snadnƒõji naj√≠t.</li>
      <li><strong>Z≈Østa≈àte viditeln√≠:</strong> Aktivujte viditelnost √∫ƒçtu a nab√≠dnƒõte sv√© slu≈æby.</li>
      <li><strong>Vyu≈æijte nab√≠dky:</strong> Jako pilot z√≠sk√°te p≈ô√≠stup k exkluzivn√≠m akc√≠m a slev√°m.</li>
    </ul>

    <h2 style="color:#0077B6;font-size:17px;margin-top:20px;">V√°≈° aktu√°ln√≠ √∫ƒçet</h2>
    <p>V√°≈° √∫ƒçet je nastaven na typ <strong style="color:#258f01;">Basic</strong>, co≈æ p≈ôin√°≈°√≠ tyto v√Ωhody:</p>
    <ul style="padding-left:20px;">
      <li><span style="color:#258f01;font-weight:600;">Viditelnost:</span> Va≈°e jm√©no a status jsou dostupn√© inzerent≈Øm.</li>
      <li><span style="color:#258f01;font-weight:600;">2 drony a 2 specializace:</span> Flexibiln√≠ nab√≠dka slu≈æeb.</li>
      <li><span style="color:#258f01;font-weight:600;">Dostupnost a dojezd:</span> Klienti vid√≠, kdy a kde m≈Ø≈æete pracovat.</li>
      <li><span style="color:#258f01;font-weight:600;">Ovƒõ≈ôen√Ω provozovatel:</span> Vy≈°≈°√≠ d≈Øvƒõryhodnost a v√≠ce zak√°zek.</li>
    </ul>

    <h2 style="color:#0077B6;font-size:17px;margin-top:20px;">Co nab√≠z√≠ Premium?</h2>
    <p>Pokud chcete pln√Ω p≈ô√≠stup ke v≈°em funkc√≠m, 
       <strong style="color:#8f06bd;">Premium √∫ƒçet</strong> je pro v√°s ide√°ln√≠:</p>
    <ul style="padding-left:20px;">
      <li><span style="color:#8f06bd;font-weight:600;">Neomezen√Ω poƒçet dron≈Ø a specializac√≠</span></li>
      <li><span style="color:#8f06bd;font-weight:600;">Viditeln√© kontakty:</span> E-mail i telefon viditeln√© inzerent≈Øm.</li>
      <li><span style="color:#8f06bd;font-weight:600;">Fialov√° znaƒçka na mapƒõ:</span> v√Ωrazn√© zv√Ωraznƒõn√≠ va≈°eho profilu.</li>
      <li><span style="color:#8f06bd;font-weight:600;">P≈ô√≠m√° komunikace:</span> inzerenti v√°s mohou oslovit nap≈ô√≠mo.</li>
    </ul>

    <h2 style="color:#0077B6;font-size:17px;margin-top:20px;">Pokud ƒçlenstv√≠ vypr≈°√≠</h2>
    <p>Po vypr≈°en√≠ ƒçlenstv√≠ se v√°≈° √∫ƒçet zmƒõn√≠ na 
       <strong style="color:#b0f759;">Free</strong> s omezen√≠mi:</p>
    <ul style="padding-left:20px;">
      <li>Pouze z√°kladn√≠ informace (jm√©no, 1 dron, 1 specializace)</li>
      <li>Bez p≈ô√≠stupu ke kontakt≈Øm a roz≈°√≠≈ôen√Ωm funkc√≠m</li>
    </ul>

    <p>ƒålenstv√≠ m≈Ø≈æete kdykoliv prodlou≈æit v nastaven√≠ profilu.  
       Nav√≠c m≈Ø≈æete sd√≠let sv≈Øj referral k√≥d ‚Äì z√≠sk√°te 7 dn√≠ Basic zdarma nebo Premium nav√≠c.</p>

    <h2 style="color:#0077B6;font-size:17px;margin-top:20px;">Co d√°l?</h2>
    <p>Zaƒçnƒõte aktivnƒõ spravovat sv≈Øj profil a p≈ôitahujte v√≠ce inzerent≈Ø.  
       Pokud chcete r≈Øst je≈°tƒõ rychleji, zva≈æte 
       <strong style="color:#8f06bd;">p≈ôechod na Premium √∫ƒçet</strong>.</p>

    <p>V p≈ô√≠padƒõ dotaz≈Ø pi≈°te na 
       <a href="mailto:dronadmin@seznam.cz" style="color:#0077B6;">dronadmin@seznam.cz</a>.</p>

    <p style="margin-top:30px;">S pozdravem,<br><strong>T√Ωm NajdiPilota.cz</strong></p>

    <p style="font-size:13px;color:#6c757d;">V√≠ce informac√≠ najdete na str√°nk√°ch 
      <a href="https://www.najdipilota.cz/o-projektu.html" style="color:#0077B6;">O projektu</a> 
      a <a href="https://www.najdipilota.cz/faq.html" style="color:#0077B6;">FAQ</a>.
    </p>
  `;
  return wrapEmailContent(content, "V√≠tejte na NajdiPilota.cz!");
}

// ---------------------------------------------------------------------
// Upom√≠nka ‚Äì 7 dn√≠ do vypr≈°en√≠
// ---------------------------------------------------------------------
function membershipExpiry7DaysEmail(refCode) {
  const refUrl = `https://najdipilota.cz/register.html?ref=${encodeURIComponent(refCode)}`;
  const content = `
    <h2 style="color:#0077B6;">‚è≥ Va≈°e ƒçlenstv√≠ brzy vypr≈°√≠</h2>
    <p>Zb√Ωv√° u≈æ jen <strong>7 dn√≠</strong> do vypr≈°en√≠ platnosti va≈°eho ƒçlenstv√≠.</p>
    <p><strong>Jak prodlou≈æit ƒçlenstv√≠?</strong></p>
    <ol>
      <li>P≈ôihlaste se na sv≈Øj √∫ƒçet pilota.</li>
      <li>V profilu kliknƒõte na <strong>"Prodlou≈æit ƒçlenstv√≠"</strong>.</li>
    </ol>
    <p><a href="https://www.najdipilota.cz/subscription.html" style="color:#0077B6;">Mo≈ænosti p≈ôedplatn√©ho</a></p>
    <hr>
    <h3 style="color:#258f01;">üéÅ P≈ôiveƒète kamar√°d a z√≠skejte +7 dn√≠ zdarma!</h3>
    <p>Pozvƒõte kamar√°da p≈ôes tento odkaz:</p>
    <div style="background:#f1f1f1;padding:10px;text-align:center;border-radius:6px;">${refUrl}</div>
  `;
  return wrapEmailContent(content, "Upom√≠nka ƒçlenstv√≠");
}

// ---------------------------------------------------------------------
// Upom√≠nka ‚Äì 3 dny do vypr≈°en√≠
// ---------------------------------------------------------------------
function membershipExpiry3DaysEmail(refCode) {
  const refUrl = `https://najdipilota.cz/register.html?ref=${encodeURIComponent(refCode)}`;
  const content = `
    <h2 style="color:red;">‚ö†Ô∏è Posledn√≠ 3 dny pro prodlou≈æen√≠!</h2>
    <p>Va≈°e ƒçlenstv√≠ vypr≈°√≠ u≈æ za <strong>3 dny</strong>. Pot√© bude √∫ƒçet p≈ôeveden na 
       <strong style="color:#b0f759;">Free</strong>.</p>
    <p><a href="https://www.najdipilota.cz/subscription.html" style="color:#0077B6;">Prodlou≈æit ƒçlenstv√≠</a></p>
    <hr>
    <h3 style="color:#258f01;">üéÅ P≈ôiveƒète kamar√°d a z√≠skejte +7 dn√≠ zdarma!</h3>
    <div style="background:#f1f1f1;padding:10px;text-align:center;border-radius:6px;">${refUrl}</div>
  `;
  return wrapEmailContent(content, "Upom√≠nka ƒçlenstv√≠");
}

// ---------------------------------------------------------------------
// Upom√≠nka ‚Äì 0 dny do vypr≈°en√≠
// ---------------------------------------------------------------------
function membershipExpiry0DaysEmail(refCode) {
  const refUrl = `https://najdipilota.cz/register.html?ref=${encodeURIComponent(refCode)}`;
  const content = `
    <h2 style="color:red;">‚ö†Ô∏è ƒålenstv√≠ vypr≈°√≠ dnes!</h2>
    <p>Va≈°e ƒçlenstv√≠ vypr≈°√≠ <strong>dnes</strong>. Pokud si jej neprodlou≈æ√≠te,
       √∫ƒçet bude p≈ôeveden na <strong style="color:#b0f759;">Free</strong>.</p>
    <p><a href="https://www.najdipilota.cz/subscription.html" style="color:#0077B6;">Prodlou≈æit ƒçlenstv√≠</a></p>
    <hr>
    <h3 style="color:#258f01;">üéÅ P≈ôiveƒète kamar√°d a z√≠skejte +7 dn√≠ zdarma!</h3>
    <div style="background:#f1f1f1;padding:10px;text-align:center;border-radius:6px;">${refUrl}</div>
  `;
  return wrapEmailContent(content, "Upom√≠nka ƒçlenstv√≠");
}


// ---------------------------------------------------------------------
// P≈ôehled nep≈ôeƒçten√Ωch zpr√°v
// ---------------------------------------------------------------------
function buildUnreadDigestEmail(pilotName, items) {
  const rows = items.map(it => `
    <tr>
      <td style="padding:8px 12px;border-bottom:1px solid #eee;">
        <strong>${escapeHtml(it.advertiserName)}</strong><br>
        <span style="font-size:12px;color:#666;">${escapeHtml(it.advertiserEmail)}</span>
      </td>
      <td style="padding:8px 12px;border-bottom:1px solid #eee;text-align:center;">
        ${it.unreadCount}
      </td>
      <td style="padding:8px 12px;border-bottom:1px solid #eee;">
        ${escapeHtml(it.lastMessage)}<br>
        <span style="font-size:12px;color:#666;">${it.lastTime.toLocaleString('cs-CZ')}</span>
      </td>
    </tr>
  `).join('');

  const total = items.reduce((a,b)=>a+b.unreadCount,0);

  const content = `
    <p>Dobr√Ω den, <strong>${escapeHtml(pilotName)}</strong> üëã</p>
    <p>M√°te <strong>${total}</strong> nep≈ôeƒçten√Ωch zpr√°v.</p>
    <table style="width:100%;border-collapse:collapse;font-size:14px;">
      <thead>
        <tr style="background:#ecf0f1;">
          <th style="padding:8px;text-align:left;">Inzerent</th>
          <th style="padding:8px;">Poƒçet</th>
          <th style="padding:8px;text-align:left;">Posledn√≠ zpr√°va</th>
        </tr>
      </thead>
      <tbody>${rows}</tbody>
    </table>
    <p style="margin-top:20px;">
      <a href="https://www.najdipilota.cz/moje-zpravy.html" style="color:#0077B6;">üëâ Otev≈ô√≠t zpr√°vy</a>
    </p>
  `;
  return wrapEmailContent(content, "Nep≈ôeƒçten√© zpr√°vy");
}

// ---------------------------------------------------------------------
// P≈ôehled nov√Ωch popt√°vek
// ---------------------------------------------------------------------
function buildNewDemandsDigestEmailFancy(pilotName, demands) {
  const rows = demands.map(d => `
    <tr>
      <td style="padding:12px;border-bottom:1px solid #eee;">
        <strong>${escapeHtml(d.title || 'Bez n√°zvu')}</strong><br>
        <span style="font-size:13px;color:#7f8c8d;">${escapeHtml(d.location || d.region || '')}</span><br>
        <span style="font-size:14px;color:#34495e;">${(d.description || '').slice(0, 160)}${(d.description || '').length > 160 ? '‚Ä¶' : ''}</span>
      </td>
      <td style="padding:12px;border-bottom:1px solid #eee;text-align:right;font-weight:bold;color:#27ae60;">
        ${d.budget != null ? (d.budget + ' Kƒç') : '‚Äî'}
      </td>
    </tr>
  `).join('');

  const content = `
    <p>Dobr√Ω den, <strong>${escapeHtml(pilotName || 'pilote')}</strong> üëã</p>
    <p>P≈ôin√°≈°√≠me v√°m nov√© popt√°vky z posledn√≠ch 24 hodin:</p>
    <table style="width:100%;border-collapse:collapse;font-size:14px;">
      <thead>
        <tr style="background:#ecf0f1;">
          <th style="padding:12px;text-align:left;">Popt√°vka</th>
          <th style="padding:12px;text-align:right;">Rozpoƒçet</th>
        </tr>
      </thead>
      <tbody>${rows}</tbody>
    </table>
    <div style="text-align:center;margin-top:24px;">
      <a href="https://www.najdipilota.cz/poptavky.html" 
         style="background:#27ae60;color:#fff;text-decoration:none;padding:12px 20px;border-radius:6px;font-weight:bold;">
        üëâ Zobrazit v≈°echny popt√°vky
      </a>
    </div>
  `;
  return wrapEmailContent(content, "Nov√© popt√°vky");
}

// ‚¨áÔ∏è TEST: po≈°li v≈°echny e-maily na jednu adresu (jen z localhostu)
app.get('/test-send-all-emails', allowLocalhostOnly, async (req, res) => {
  const to = req.query.to || 'drboom@seznam.cz';

  // vzorov√° data pro digesty/demands
  const sampleUnreadItems = [
    {
      advertiserName: 'Acme s.r.o.',
      advertiserEmail: 'poptavky@acme.cz',
      unreadCount: 2,
      lastMessage: 'Dobr√Ω den, pos√≠l√°me up≈ôesnƒõn√≠ lokality a term√≠nu‚Ä¶',
      lastTime: new Date()
    },
    {
      advertiserName: 'FotoDrone',
      advertiserEmail: 'kontakt@fotodrone.cz',
      unreadCount: 1,
      lastMessage: 'Mƒõli bychom z√°jem o leteck√© sn√≠mky vinic.',
      lastTime: new Date(Date.now() - 3600 * 1000)
    }
  ];

  const sampleDemands = [
    {
      title: 'Mapov√°n√≠ stavby ‚Äì Praha 6',
      description: 'Jednor√°zov√Ω let, ortofoto + p√°r fotek detail≈Ø.',
      location: 'Praha 6',
      region: 'Praha',
      budget: 6000,
      deadline: null,
      advertiser_email: 'stavby@invest.cz',
      created_at: new Date()
    },
    {
      title: 'Svatba ‚Äì kr√°tk√© video z dronu',
      description: 'Sobota od 14:00, cca 30‚Äì45 min z√°bƒõr≈Ø.',
      location: 'Brno',
      region: 'Jihomoravsk√Ω',
      budget: 4500,
      deadline: null,
      advertiser_email: 'nevesty@love.cz',
      created_at: new Date(Date.now() - 6 * 3600 * 1000)
    }
  ];

  const refCode = 'TEST-ABC123';

  const wrapIfPossible = (inner, title) => {
    try {
      if (typeof wrapEmailContent === 'function') {
        return wrapEmailContent(inner, title);
      }
    } catch {}
    return inner;
  };

  const results = [];
  try {
    // 1) Onboarding
    await transporter.sendMail({
      from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
      to,
      subject: 'TEST: Onboarding',
      html: onboardingEmailContent()
    });
    results.push('‚úÖ Onboarding odesl√°n');

    // 2) Expirace 7 dn√≠
    await transporter.sendMail({
      from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
      to,
      subject: 'TEST: ƒålenstv√≠ vypr≈°√≠ za 7 dn√≠',
      html: membershipExpiry7DaysEmail(refCode)
    });
    results.push('‚úÖ Expirace 7 dn√≠ odesl√°na');

    // 3) Expirace 3 dny
    await transporter.sendMail({
      from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
      to,
      subject: 'TEST: ƒålenstv√≠ vypr≈°√≠ za 3 dny',
      html: membershipExpiry3DaysEmail(refCode)
    });
    results.push('‚úÖ Expirace 3 dny odesl√°na');

    // 3b) Expirace 0 dn√≠ (DNES)
    await transporter.sendMail({
      from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
      to,
      subject: 'TEST: ƒålenstv√≠ vypr≈°√≠ dnes',
      html: membershipExpiry0DaysEmail(refCode)
    });
    results.push('‚úÖ Expirace 0 dn√≠ odesl√°na');

    // 4) Digest nep≈ôeƒçten√Ωch zpr√°v
    const digestHtmlInner = (typeof buildUnreadDigestEmail === 'function')
      ? buildUnreadDigestEmail('Testovac√≠ Pilot', sampleUnreadItems)
      : '<p>Digest HTML nen√≠ dostupn√Ω.</p>';
    const digestHtml = wrapIfPossible(digestHtmlInner, 'Nep≈ôeƒçten√© zpr√°vy');
    const digestText = (typeof buildUnreadDigestText === 'function')
      ? buildUnreadDigestText('Testovac√≠ Pilot', sampleUnreadItems)
      : 'Digest TEXT nen√≠ dostupn√Ω.';

    await transporter.sendMail({
      from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
      to,
      subject: 'TEST: Nep≈ôeƒçten√© zpr√°vy (digest)',
      html: digestHtml,
      text: digestText
    });
    results.push('‚úÖ Digest nep≈ôeƒçten√Ωch zpr√°v odesl√°n');

    // 5) Digest nov√Ωch popt√°vek
    const demandsHtmlInner = (typeof buildNewDemandsDigestEmailFancy === 'function')
      ? buildNewDemandsDigestEmailFancy('Testovac√≠ Pilot', sampleDemands)
      : '<p>Popt√°vky HTML nen√≠ dostupn√Ω.</p>';
    const demandsHtml = wrapIfPossible(demandsHtmlInner, 'Nov√© popt√°vky');
    const demandsText = (typeof buildNewDemandsDigestText === 'function')
      ? buildNewDemandsDigestText('Testovac√≠ Pilot', sampleDemands)
      : 'Popt√°vky TEXT nen√≠ dostupn√Ω.';

    await transporter.sendMail({
      from: '"NajdiPilota.cz" <dronadmin@seznam.cz>',
      to,
      subject: 'TEST: Nov√© popt√°vky (posledn√≠ch 24 h)',
      html: demandsHtml,
      text: demandsText
    });
    results.push('‚úÖ Digest nov√Ωch popt√°vek odesl√°n');

    res.send(`üì® Hotovo. Odesl√°no na ${to}:\n- ${results.join('\n- ')}`);
  } catch (err) {
    console.error('‚ùå /test-send-all-emails error:', err);
    res.status(500).send(`Chyba p≈ôi odes√≠l√°n√≠: ${err.message}`);
  }
});



app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

